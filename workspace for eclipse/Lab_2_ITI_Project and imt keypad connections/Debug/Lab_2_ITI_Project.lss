
Lab_2_ITI_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000474  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000862  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000
#include <util/delay.h>


int main (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	/*declare variable name switch_state to ge the state of the switch*/
	/*values are ->0 "Pressed"*/
	/*values are ->1 "Released"*/
	u8 switch_state;
	/*set PA0 as Input*/
	CLR_BIT(DDRA,0);	//PA0 output
  76:	aa e3       	ldi	r26, 0x3A	; 58
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	8c 93       	st	X, r24

	SET_BIT(PORTA,0);	//pull up resistor in PA0
  84:	ab e3       	ldi	r26, 0x3B	; 59
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	eb e3       	ldi	r30, 0x3B	; 59
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	8c 93       	st	X, r24

	SET_BIT(DDRA,7);	// PA7 output
  92:	aa e3       	ldi	r26, 0x3A	; 58
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	ea e3       	ldi	r30, 0x3A	; 58
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24

	CLR_BIT(PORTA,7);	// output low at PA7
  a0:	ab e3       	ldi	r26, 0x3B	; 59
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	eb e3       	ldi	r30, 0x3B	; 59
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 77       	andi	r24, 0x7F	; 127
  ac:	8c 93       	st	X, r24

	while(1){
		/*Read the siwtch value*/
		switch_state=GET_BIT(PINA,0);
  ae:	e9 e3       	ldi	r30, 0x39	; 57
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	81 70       	andi	r24, 0x01	; 1
  b6:	89 83       	std	Y+1, r24	; 0x01
		/*check if the switch is pressed or not*/
		if(switch_state==0){
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	88 23       	and	r24, r24
  bc:	41 f4       	brne	.+16     	; 0xce <main+0x62>
			/*the switch is pressed , so turn on the led*/
			SET_BIT(PORTA,7);
  be:	ab e3       	ldi	r26, 0x3B	; 59
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	eb e3       	ldi	r30, 0x3B	; 59
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	8c 93       	st	X, r24
  cc:	f0 cf       	rjmp	.-32     	; 0xae <main+0x42>
		}
		else {
			/*the switch is released , so turn off the led*/
			CLR_BIT(PORTA,7);
  ce:	ab e3       	ldi	r26, 0x3B	; 59
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	eb e3       	ldi	r30, 0x3B	; 59
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	8c 93       	st	X, r24
  dc:	e8 cf       	rjmp	.-48     	; 0xae <main+0x42>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>

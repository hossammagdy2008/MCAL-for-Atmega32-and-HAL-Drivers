
Car_Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003086  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00003086  000030fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000255c  00000000  00000000  00003124  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000116f  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000067ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000694f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000aba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ad28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000afea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 11 	call	0x221e	; 0x221e <main>
      7a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0a 18 	jmp	0x3014	; 0x3014 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 26 18 	jmp	0x304c	; 0x304c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 16 18 	jmp	0x302c	; 0x302c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 36 18 	jmp	0x306c	; 0x306c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <Dio_vidSetPinVal>:
#undef F_CPU
#define F_CPU 8000000

#include "../DIO_V2/Dio_int.h"

void Dio_vidSetPinVal(u8 Copy_u8SwPinId,u8 Copy_u8SwPinVal){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <Dio_vidSetPinVal+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <Dio_vidSetPinVal+0x8>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Dio_vidSetPinVal+0xa>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	8b 83       	std	Y+3, r24	; 0x03
     c9e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	86 95       	lsr	r24
     ca4:	86 95       	lsr	r24
     ca6:	86 95       	lsr	r24
     ca8:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
     caa:	8b 81       	ldd	r24, Y+3	; 0x03
     cac:	87 70       	andi	r24, 0x07	; 7
     cae:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3e 83       	std	Y+6, r19	; 0x06
     cb8:	2d 83       	std	Y+5, r18	; 0x05
     cba:	8d 81       	ldd	r24, Y+5	; 0x05
     cbc:	9e 81       	ldd	r25, Y+6	; 0x06
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Dio_vidSetPinVal+0x38>
     cc4:	43 c0       	rjmp	.+134    	; 0xd4c <Dio_vidSetPinVal+0xbe>
     cc6:	2d 81       	ldd	r18, Y+5	; 0x05
     cc8:	3e 81       	ldd	r19, Y+6	; 0x06
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <Dio_vidSetPinVal+0x4c>
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	9e 81       	ldd	r25, Y+6	; 0x06
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	71 f0       	breq	.+28     	; 0xcf4 <Dio_vidSetPinVal+0x66>
     cd8:	bc c0       	rjmp	.+376    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
     cda:	2d 81       	ldd	r18, Y+5	; 0x05
     cdc:	3e 81       	ldd	r19, Y+6	; 0x06
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <Dio_vidSetPinVal+0x58>
     ce4:	5f c0       	rjmp	.+190    	; 0xda4 <Dio_vidSetPinVal+0x116>
     ce6:	8d 81       	ldd	r24, Y+5	; 0x05
     ce8:	9e 81       	ldd	r25, Y+6	; 0x06
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <Dio_vidSetPinVal+0x64>
     cf0:	85 c0       	rjmp	.+266    	; 0xdfc <Dio_vidSetPinVal+0x16e>
     cf2:	af c0       	rjmp	.+350    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
	case 0:	//PORTA
		if(Copy_u8SwPinVal==DIO_u8HIGH)
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <Dio_vidSetPinVal+0x94>
		{
			SET_BIT(PORTA,Loc_u8PinId);
     cfa:	ab e3       	ldi	r26, 0x3B	; 59
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	eb e3       	ldi	r30, 0x3B	; 59
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <Dio_vidSetPinVal+0x8a>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <Dio_vidSetPinVal+0x86>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	98 c0       	rjmp	.+304    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTA,Loc_u8PinId);
     d22:	ab e3       	ldi	r26, 0x3B	; 59
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	eb e3       	ldi	r30, 0x3B	; 59
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <Dio_vidSetPinVal+0xb2>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <Dio_vidSetPinVal+0xae>
     d44:	80 95       	com	r24
     d46:	84 23       	and	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	83 c0       	rjmp	.+262    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 1:	//PORTB
		if(Copy_u8SwPinVal==DIO_u8HIGH)
     d4c:	8c 81       	ldd	r24, Y+4	; 0x04
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	a1 f4       	brne	.+40     	; 0xd7a <Dio_vidSetPinVal+0xec>
		{
			SET_BIT(PORTB,Loc_u8PinId);
     d52:	a8 e3       	ldi	r26, 0x38	; 56
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e8 e3       	ldi	r30, 0x38	; 56
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <Dio_vidSetPinVal+0xe2>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <Dio_vidSetPinVal+0xde>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	6c c0       	rjmp	.+216    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTB,Loc_u8PinId);
     d7a:	a8 e3       	ldi	r26, 0x38	; 56
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e8 e3       	ldi	r30, 0x38	; 56
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <Dio_vidSetPinVal+0x10a>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <Dio_vidSetPinVal+0x106>
     d9c:	80 95       	com	r24
     d9e:	84 23       	and	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	57 c0       	rjmp	.+174    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 2:	// PORTC
		if(Copy_u8SwPinVal==DIO_u8HIGH)
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	a1 f4       	brne	.+40     	; 0xdd2 <Dio_vidSetPinVal+0x144>
		{
			SET_BIT(PORTC,Loc_u8PinId);
     daa:	a5 e3       	ldi	r26, 0x35	; 53
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e5 e3       	ldi	r30, 0x35	; 53
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <Dio_vidSetPinVal+0x13a>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <Dio_vidSetPinVal+0x136>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	40 c0       	rjmp	.+128    	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTC,Loc_u8PinId);
     dd2:	a5 e3       	ldi	r26, 0x35	; 53
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <Dio_vidSetPinVal+0x162>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <Dio_vidSetPinVal+0x15e>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	2b c0       	rjmp	.+86     	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 3:	// PORTD
		if(Copy_u8SwPinVal==DIO_u8HIGH)
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	a1 f4       	brne	.+40     	; 0xe2a <Dio_vidSetPinVal+0x19c>
		{
			SET_BIT(PORTD,Loc_u8PinId);
     e02:	a2 e3       	ldi	r26, 0x32	; 50
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e2 e3       	ldi	r30, 0x32	; 50
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <Dio_vidSetPinVal+0x192>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <Dio_vidSetPinVal+0x18e>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTD,Loc_u8PinId);
     e2a:	a2 e3       	ldi	r26, 0x32	; 50
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e2 e3       	ldi	r30, 0x32	; 50
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Dio_vidSetPinVal+0x1ba>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <Dio_vidSetPinVal+0x1b6>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
	break;
	default:
	break;
	}

}
     e52:	26 96       	adiw	r28, 0x06	; 6
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <Dio_vidTglPinVal>:

void Dio_vidTglPinVal(u8 Copy_u8SwPinId){
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <Dio_vidTglPinVal+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <Dio_vidTglPinVal+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	86 95       	lsr	r24
     e7c:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	3d 83       	std	Y+5, r19	; 0x05
     e8c:	2c 83       	std	Y+4, r18	; 0x04
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	49 f1       	breq	.+82     	; 0xeea <Dio_vidTglPinVal+0x86>
     e98:	2c 81       	ldd	r18, Y+4	; 0x04
     e9a:	3d 81       	ldd	r19, Y+5	; 0x05
     e9c:	22 30       	cpi	r18, 0x02	; 2
     e9e:	31 05       	cpc	r19, r1
     ea0:	2c f4       	brge	.+10     	; 0xeac <Dio_vidTglPinVal+0x48>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	61 f0       	breq	.+24     	; 0xec2 <Dio_vidTglPinVal+0x5e>
     eaa:	5a c0       	rjmp	.+180    	; 0xf60 <Dio_vidTglPinVal+0xfc>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	22 30       	cpi	r18, 0x02	; 2
     eb2:	31 05       	cpc	r19, r1
     eb4:	71 f1       	breq	.+92     	; 0xf12 <Dio_vidTglPinVal+0xae>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	e9 f1       	breq	.+122    	; 0xf3a <Dio_vidTglPinVal+0xd6>
     ec0:	4f c0       	rjmp	.+158    	; 0xf60 <Dio_vidTglPinVal+0xfc>
	case 0:	//PORTA
		TGL_BIT(PORTA,Loc_u8PinId);
     ec2:	ab e3       	ldi	r26, 0x3B	; 59
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	eb e3       	ldi	r30, 0x3B	; 59
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	48 2f       	mov	r20, r24
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	02 2e       	mov	r0, r18
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <Dio_vidTglPinVal+0x7c>
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <Dio_vidTglPinVal+0x78>
     ee4:	84 27       	eor	r24, r20
     ee6:	8c 93       	st	X, r24
     ee8:	3b c0       	rjmp	.+118    	; 0xf60 <Dio_vidTglPinVal+0xfc>
	break;
	case 1:	//PORTB
		TGL_BIT(PORTB,Loc_u8PinId);
     eea:	a8 e3       	ldi	r26, 0x38	; 56
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <Dio_vidTglPinVal+0xa4>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <Dio_vidTglPinVal+0xa0>
     f0c:	84 27       	eor	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	27 c0       	rjmp	.+78     	; 0xf60 <Dio_vidTglPinVal+0xfc>
	break;
	case 2:	// PORTC
		TGL_BIT(PORTC,Loc_u8PinId);
     f12:	a5 e3       	ldi	r26, 0x35	; 53
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e3       	ldi	r30, 0x35	; 53
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <Dio_vidTglPinVal+0xcc>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <Dio_vidTglPinVal+0xc8>
     f34:	84 27       	eor	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <Dio_vidTglPinVal+0xfc>
	break;
	case 3:	// PORTD
		TGL_BIT(PORTD,Loc_u8PinId);
     f3a:	a2 e3       	ldi	r26, 0x32	; 50
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e2 e3       	ldi	r30, 0x32	; 50
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <Dio_vidTglPinVal+0xf4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <Dio_vidTglPinVal+0xf0>
     f5c:	84 27       	eor	r24, r20
     f5e:	8c 93       	st	X, r24
	break;
	default:
	break;
	}
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <Dio_u8GetPinVal>:

u8 Dio_u8GetPinVal(u8 Copy_u8SwPinId){
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	00 d0       	rcall	.+0      	; 0xf76 <Dio_u8GetPinVal+0x6>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <Dio_u8GetPinVal+0x8>
     f78:	00 d0       	rcall	.+0      	; 0xf7a <Dio_u8GetPinVal+0xa>
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	86 95       	lsr	r24
     f84:	86 95       	lsr	r24
     f86:	86 95       	lsr	r24
     f88:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	87 70       	andi	r24, 0x07	; 7
     f8e:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3e 83       	std	Y+6, r19	; 0x06
     f98:	2d 83       	std	Y+5, r18	; 0x05
     f9a:	4d 81       	ldd	r20, Y+5	; 0x05
     f9c:	5e 81       	ldd	r21, Y+6	; 0x06
     f9e:	41 30       	cpi	r20, 0x01	; 1
     fa0:	51 05       	cpc	r21, r1
     fa2:	49 f1       	breq	.+82     	; 0xff6 <Dio_u8GetPinVal+0x86>
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	82 30       	cpi	r24, 0x02	; 2
     faa:	91 05       	cpc	r25, r1
     fac:	34 f4       	brge	.+12     	; 0xfba <Dio_u8GetPinVal+0x4a>
     fae:	2d 81       	ldd	r18, Y+5	; 0x05
     fb0:	3e 81       	ldd	r19, Y+6	; 0x06
     fb2:	21 15       	cp	r18, r1
     fb4:	31 05       	cpc	r19, r1
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <Dio_u8GetPinVal+0x60>
     fb8:	57 c0       	rjmp	.+174    	; 0x1068 <Dio_u8GetPinVal+0xf8>
     fba:	4d 81       	ldd	r20, Y+5	; 0x05
     fbc:	5e 81       	ldd	r21, Y+6	; 0x06
     fbe:	42 30       	cpi	r20, 0x02	; 2
     fc0:	51 05       	cpc	r21, r1
     fc2:	61 f1       	breq	.+88     	; 0x101c <Dio_u8GetPinVal+0xac>
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	d1 f1       	breq	.+116    	; 0x1042 <Dio_u8GetPinVal+0xd2>
     fce:	4c c0       	rjmp	.+152    	; 0x1068 <Dio_u8GetPinVal+0xf8>
	case 0:	//PORTA
		return GET_BIT(PINA,Loc_u8PinId);
     fd0:	e9 e3       	ldi	r30, 0x39	; 57
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	a9 01       	movw	r20, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <Dio_u8GetPinVal+0x78>
     fe4:	55 95       	asr	r21
     fe6:	47 95       	ror	r20
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <Dio_u8GetPinVal+0x74>
     fec:	ca 01       	movw	r24, r20
     fee:	58 2f       	mov	r21, r24
     ff0:	51 70       	andi	r21, 0x01	; 1
     ff2:	5c 83       	std	Y+4, r21	; 0x04
     ff4:	3a c0       	rjmp	.+116    	; 0x106a <Dio_u8GetPinVal+0xfa>
	break;
	case 1:	//PORTB
		return GET_BIT(PINB,Loc_u8PinId);
     ff6:	e6 e3       	ldi	r30, 0x36	; 54
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	88 2f       	mov	r24, r24
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	a9 01       	movw	r20, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <Dio_u8GetPinVal+0x9e>
    100a:	55 95       	asr	r21
    100c:	47 95       	ror	r20
    100e:	8a 95       	dec	r24
    1010:	e2 f7       	brpl	.-8      	; 0x100a <Dio_u8GetPinVal+0x9a>
    1012:	ca 01       	movw	r24, r20
    1014:	58 2f       	mov	r21, r24
    1016:	51 70       	andi	r21, 0x01	; 1
    1018:	5c 83       	std	Y+4, r21	; 0x04
    101a:	27 c0       	rjmp	.+78     	; 0x106a <Dio_u8GetPinVal+0xfa>
	break;
	case 2:	//PORTC
		return GET_BIT(PINC,Loc_u8PinId);
    101c:	e3 e3       	ldi	r30, 0x33	; 51
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	88 2f       	mov	r24, r24
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a9 01       	movw	r20, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <Dio_u8GetPinVal+0xc4>
    1030:	55 95       	asr	r21
    1032:	47 95       	ror	r20
    1034:	8a 95       	dec	r24
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <Dio_u8GetPinVal+0xc0>
    1038:	ca 01       	movw	r24, r20
    103a:	58 2f       	mov	r21, r24
    103c:	51 70       	andi	r21, 0x01	; 1
    103e:	5c 83       	std	Y+4, r21	; 0x04
    1040:	14 c0       	rjmp	.+40     	; 0x106a <Dio_u8GetPinVal+0xfa>
	break;
	case 3:	//PORTD
		return GET_BIT(PIND,Loc_u8PinId);
    1042:	e0 e3       	ldi	r30, 0x30	; 48
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	88 2f       	mov	r24, r24
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a9 01       	movw	r20, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <Dio_u8GetPinVal+0xea>
    1056:	55 95       	asr	r21
    1058:	47 95       	ror	r20
    105a:	8a 95       	dec	r24
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <Dio_u8GetPinVal+0xe6>
    105e:	ca 01       	movw	r24, r20
    1060:	58 2f       	mov	r21, r24
    1062:	51 70       	andi	r21, 0x01	; 1
    1064:	5c 83       	std	Y+4, r21	; 0x04
    1066:	01 c0       	rjmp	.+2      	; 0x106a <Dio_u8GetPinVal+0xfa>
	break;
	default:
		return 0;
    1068:	1c 82       	std	Y+4, r1	; 0x04
    106a:	8c 81       	ldd	r24, Y+4	; 0x04
	break;
	}
}
    106c:	26 96       	adiw	r28, 0x06	; 6
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <Keypad_u8GetKey>:

u8 KeyPad_Values_Array[4][4]={{'1','2','3','+'},{'4','5','6','-'},
							{'7','8','9','*'},{'#','0','=','/'}};


u8 Keypad_u8GetKey(void){
    107e:	1f 93       	push	r17
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2a 97       	sbiw	r28, 0x0a	; 10
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
	u8 Loc_u8PressedKey=KEYPAD_NO_PRESSED_KEY;
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8ColValue;
	u8 row;
	u8 KEYPAD_au8ROW[4]={KEYPAD_u8ROW_0,KEYPAD_u8ROW_1,KEYPAD_u8ROW_2,KEYPAD_u8ROW_3};
    1098:	83 e1       	ldi	r24, 0x13	; 19
    109a:	8c 83       	std	Y+4, r24	; 0x04
    109c:	82 e1       	ldi	r24, 0x12	; 18
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	81 e1       	ldi	r24, 0x11	; 17
    10a2:	8e 83       	std	Y+6, r24	; 0x06
    10a4:	80 e1       	ldi	r24, 0x10	; 16
    10a6:	8f 83       	std	Y+7, r24	; 0x07
for(row=0;row<4;row++){
    10a8:	19 82       	std	Y+1, r1	; 0x01
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <Keypad_u8GetKey+0x4c>
		/*first i make all rows as high*/
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8HIGH);
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	ce 01       	movw	r24, r28
    10b4:	04 96       	adiw	r24, 0x04	; 4
    10b6:	fc 01       	movw	r30, r24
    10b8:	e2 0f       	add	r30, r18
    10ba:	f3 1f       	adc	r31, r19
    10bc:	80 81       	ld	r24, Z
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
u8 Keypad_u8GetKey(void){
	u8 Loc_u8PressedKey=KEYPAD_NO_PRESSED_KEY;
	u8 Loc_u8ColValue;
	u8 row;
	u8 KEYPAD_au8ROW[4]={KEYPAD_u8ROW_0,KEYPAD_u8ROW_1,KEYPAD_u8ROW_2,KEYPAD_u8ROW_3};
for(row=0;row<4;row++){
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	70 f3       	brcs	.-36     	; 0x10ac <Keypad_u8GetKey+0x2e>
		/*first i make all rows as high*/
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8HIGH);
	}

	for(row=0;row<=3;row++){
    10d0:	19 82       	std	Y+1, r1	; 0x01
    10d2:	9a c0       	rjmp	.+308    	; 0x1208 <Keypad_u8GetKey+0x18a>
		/*make a single row as low */
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8LOW);
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	ce 01       	movw	r24, r28
    10dc:	04 96       	adiw	r24, 0x04	; 4
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 0f       	add	r30, r18
    10e2:	f3 1f       	adc	r31, r19
    10e4:	80 81       	ld	r24, Z
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>

		Loc_u8ColValue= (Dio_u8GetPinVal(KEYPAD_u8COL_0)<<0)
    10ec:	84 e1       	ldi	r24, 0x14	; 20
    10ee:	0e 94 b8 07 	call	0xf70	; 0xf70 <Dio_u8GetPinVal>
    10f2:	18 2f       	mov	r17, r24
    10f4:	85 e1       	ldi	r24, 0x15	; 21
    10f6:	0e 94 b8 07 	call	0xf70	; 0xf70 <Dio_u8GetPinVal>
    10fa:	88 2f       	mov	r24, r24
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	18 2b       	or	r17, r24
    1104:	86 e1       	ldi	r24, 0x16	; 22
    1106:	0e 94 b8 07 	call	0xf70	; 0xf70 <Dio_u8GetPinVal>
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	18 2b       	or	r17, r24
    1118:	87 e1       	ldi	r24, 0x17	; 23
    111a:	0e 94 b8 07 	call	0xf70	; 0xf70 <Dio_u8GetPinVal>
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	81 2b       	or	r24, r17
    1130:	8a 83       	std	Y+2, r24	; 0x02
						| (Dio_u8GetPinVal(KEYPAD_u8COL_1)<<1)
						| (Dio_u8GetPinVal(KEYPAD_u8COL_2)<<2)
						| (Dio_u8GetPinVal(KEYPAD_u8COL_3)<<3);
		/*check on columns */
		switch(Loc_u8ColValue){
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3a 87       	std	Y+10, r19	; 0x0a
    113a:	29 87       	std	Y+9, r18	; 0x09
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	8b 30       	cpi	r24, 0x0B	; 11
    1142:	91 05       	cpc	r25, r1
    1144:	99 f1       	breq	.+102    	; 0x11ac <Keypad_u8GetKey+0x12e>
    1146:	29 85       	ldd	r18, Y+9	; 0x09
    1148:	3a 85       	ldd	r19, Y+10	; 0x0a
    114a:	2c 30       	cpi	r18, 0x0C	; 12
    114c:	31 05       	cpc	r19, r1
    114e:	34 f4       	brge	.+12     	; 0x115c <Keypad_u8GetKey+0xde>
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	91 05       	cpc	r25, r1
    1158:	c9 f1       	breq	.+114    	; 0x11cc <Keypad_u8GetKey+0x14e>
    115a:	47 c0       	rjmp	.+142    	; 0x11ea <Keypad_u8GetKey+0x16c>
    115c:	29 85       	ldd	r18, Y+9	; 0x09
    115e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1160:	2d 30       	cpi	r18, 0x0D	; 13
    1162:	31 05       	cpc	r19, r1
    1164:	a1 f0       	breq	.+40     	; 0x118e <Keypad_u8GetKey+0x110>
    1166:	89 85       	ldd	r24, Y+9	; 0x09
    1168:	9a 85       	ldd	r25, Y+10	; 0x0a
    116a:	8e 30       	cpi	r24, 0x0E	; 14
    116c:	91 05       	cpc	r25, r1
    116e:	e9 f5       	brne	.+122    	; 0x11ea <Keypad_u8GetKey+0x16c>
		case COL_0_ENABLE:
			return Loc_u8PressedKey=KeyPad_Values_Array[row][COL_0];
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	fc 01       	movw	r30, r24
    1180:	e8 59       	subi	r30, 0x98	; 152
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	98 87       	std	Y+8, r25	; 0x08
    118c:	43 c0       	rjmp	.+134    	; 0x1214 <Keypad_u8GetKey+0x196>
			break;
		case COL_1_ENABLE:
			return Loc_u8PressedKey=KeyPad_Values_Array[row][COL_1];
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	fc 01       	movw	r30, r24
    119e:	e7 59       	subi	r30, 0x97	; 151
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	28 87       	std	Y+8, r18	; 0x08
    11aa:	34 c0       	rjmp	.+104    	; 0x1214 <Keypad_u8GetKey+0x196>
			break;
		case COL_2_ENABLE:
			return Loc_u8PressedKey=KeyPad_Values_Array[row][COL_2];
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	fc 01       	movw	r30, r24
    11be:	e8 59       	subi	r30, 0x98	; 152
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	80 81       	ld	r24, Z
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	3b 81       	ldd	r19, Y+3	; 0x03
    11c8:	38 87       	std	Y+8, r19	; 0x08
    11ca:	24 c0       	rjmp	.+72     	; 0x1214 <Keypad_u8GetKey+0x196>
			break;
		case COL_3_ENABLE:
			return Loc_u8PressedKey=KeyPad_Values_Array[row][COL_3];
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	88 2f       	mov	r24, r24
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	fc 01       	movw	r30, r24
    11dc:	e5 59       	subi	r30, 0x95	; 149
    11de:	ff 4f       	sbci	r31, 0xFF	; 255
    11e0:	80 81       	ld	r24, Z
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 87       	std	Y+8, r24	; 0x08
    11e8:	15 c0       	rjmp	.+42     	; 0x1214 <Keypad_u8GetKey+0x196>
			break;
		default :
			break;
		}
		/*return that single row to high then all back to high */
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8HIGH);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ce 01       	movw	r24, r28
    11f2:	04 96       	adiw	r24, 0x04	; 4
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 0f       	add	r30, r18
    11f8:	f3 1f       	adc	r31, r19
    11fa:	80 81       	ld	r24, Z
    11fc:	61 e0       	ldi	r22, 0x01	; 1
    11fe:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
for(row=0;row<4;row++){
		/*first i make all rows as high*/
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8HIGH);
	}

	for(row=0;row<=3;row++){
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	08 f4       	brcc	.+2      	; 0x1210 <Keypad_u8GetKey+0x192>
    120e:	62 cf       	rjmp	.-316    	; 0x10d4 <Keypad_u8GetKey+0x56>
			break;
		}
		/*return that single row to high then all back to high */
		Dio_vidSetPinVal(KEYPAD_au8ROW[row],DIO_u8HIGH);
	}
	return Loc_u8PressedKey;
    1210:	9b 81       	ldd	r25, Y+3	; 0x03
    1212:	98 87       	std	Y+8, r25	; 0x08
    1214:	88 85       	ldd	r24, Y+8	; 0x08
}
    1216:	2a 96       	adiw	r28, 0x0a	; 10
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	1f 91       	pop	r17
    1228:	08 95       	ret

0000122a <Lcd_vidInit>:
#include "Lcd_priv.h"
#include "Lcd_cfg.h"

/*intialize all the functions here*/

void Lcd_vidInit(void){
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	cc 54       	subi	r28, 0x4C	; 76
    1238:	d0 40       	sbci	r29, 0x00	; 0
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	fe 01       	movw	r30, r28
    1246:	e7 5b       	subi	r30, 0xB7	; 183
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 ef       	ldi	r26, 0xF0	; 240
    1250:	b1 e4       	ldi	r27, 0x41	; 65
    1252:	80 83       	st	Z, r24
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	a2 83       	std	Z+2, r26	; 0x02
    1258:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	8e 01       	movw	r16, r28
    125c:	0b 5b       	subi	r16, 0xBB	; 187
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	fe 01       	movw	r30, r28
    1262:	e7 5b       	subi	r30, 0xB7	; 183
    1264:	ff 4f       	sbci	r31, 0xFF	; 255
    1266:	60 81       	ld	r22, Z
    1268:	71 81       	ldd	r23, Z+1	; 0x01
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a ef       	ldi	r20, 0xFA	; 250
    1274:	54 e4       	ldi	r21, 0x44	; 68
    1276:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	f8 01       	movw	r30, r16
    1280:	80 83       	st	Z, r24
    1282:	91 83       	std	Z+1, r25	; 0x01
    1284:	a2 83       	std	Z+2, r26	; 0x02
    1286:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1288:	fe 01       	movw	r30, r28
    128a:	eb 5b       	subi	r30, 0xBB	; 187
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	60 81       	ld	r22, Z
    1290:	71 81       	ldd	r23, Z+1	; 0x01
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	44 f4       	brge	.+16     	; 0x12b6 <Lcd_vidInit+0x8c>
		__ticks = 1;
    12a6:	fe 01       	movw	r30, r28
    12a8:	ed 5b       	subi	r30, 0xBD	; 189
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	64 c0       	rjmp	.+200    	; 0x137e <Lcd_vidInit+0x154>
	else if (__tmp > 65535)
    12b6:	fe 01       	movw	r30, r28
    12b8:	eb 5b       	subi	r30, 0xBB	; 187
    12ba:	ff 4f       	sbci	r31, 0xFF	; 255
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	0c f0       	brlt	.+2      	; 0x12d6 <Lcd_vidInit+0xac>
    12d4:	43 c0       	rjmp	.+134    	; 0x135c <Lcd_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	fe 01       	movw	r30, r28
    12d8:	e7 5b       	subi	r30, 0xB7	; 183
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8e 01       	movw	r16, r28
    12f6:	0d 5b       	subi	r16, 0xBD	; 189
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	bc 01       	movw	r22, r24
    12fc:	cd 01       	movw	r24, r26
    12fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	f8 01       	movw	r30, r16
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	80 83       	st	Z, r24
    130c:	1f c0       	rjmp	.+62     	; 0x134c <Lcd_vidInit+0x122>
    130e:	fe 01       	movw	r30, r28
    1310:	ef 5b       	subi	r30, 0xBF	; 191
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	88 ec       	ldi	r24, 0xC8	; 200
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	91 83       	std	Z+1, r25	; 0x01
    131a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    131c:	fe 01       	movw	r30, r28
    131e:	ef 5b       	subi	r30, 0xBF	; 191
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <Lcd_vidInit+0xfc>
    132a:	fe 01       	movw	r30, r28
    132c:	ef 5b       	subi	r30, 0xBF	; 191
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	de 01       	movw	r26, r28
    1336:	ad 5b       	subi	r26, 0xBD	; 189
    1338:	bf 4f       	sbci	r27, 0xFF	; 255
    133a:	fe 01       	movw	r30, r28
    133c:	ed 5b       	subi	r30, 0xBD	; 189
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	9c 93       	st	X, r25
    134a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134c:	fe 01       	movw	r30, r28
    134e:	ed 5b       	subi	r30, 0xBD	; 189
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	d1 f6       	brne	.-76     	; 0x130e <Lcd_vidInit+0xe4>
    135a:	24 c0       	rjmp	.+72     	; 0x13a4 <Lcd_vidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135c:	8e 01       	movw	r16, r28
    135e:	0d 5b       	subi	r16, 0xBD	; 189
    1360:	1f 4f       	sbci	r17, 0xFF	; 255
    1362:	fe 01       	movw	r30, r28
    1364:	eb 5b       	subi	r30, 0xBB	; 187
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	60 81       	ld	r22, Z
    136a:	71 81       	ldd	r23, Z+1	; 0x01
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	f8 01       	movw	r30, r16
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
    137e:	fe 01       	movw	r30, r28
    1380:	ed 5b       	subi	r30, 0xBD	; 189
    1382:	ff 4f       	sbci	r31, 0xFF	; 255
    1384:	80 81       	ld	r24, Z
    1386:	91 81       	ldd	r25, Z+1	; 0x01
    1388:	fe 01       	movw	r30, r28
    138a:	ff 96       	adiw	r30, 0x3f	; 63
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	80 83       	st	Z, r24
    1390:	fe 01       	movw	r30, r28
    1392:	ff 96       	adiw	r30, 0x3f	; 63
    1394:	80 81       	ld	r24, Z
    1396:	91 81       	ldd	r25, Z+1	; 0x01
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <Lcd_vidInit+0x16e>
    139c:	fe 01       	movw	r30, r28
    139e:	ff 96       	adiw	r30, 0x3f	; 63
    13a0:	91 83       	std	Z+1, r25	; 0x01
    13a2:	80 83       	st	Z, r24
	/*send the Function Set Reg to intialize the LCD
	 *DL=1 8 bit mode
	 *N=1  2 line display
	 *F=0  Font 5*7 dots
	 * */
	Lcd_u8SendPacket( LCD_FUNCTION_SET , LCD_u8COMMAND);
    13a4:	88 e3       	ldi	r24, 0x38	; 56
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	ac e1       	ldi	r26, 0x1C	; 28
    13b2:	b2 e4       	ldi	r27, 0x42	; 66
    13b4:	8b af       	std	Y+59, r24	; 0x3b
    13b6:	9c af       	std	Y+60, r25	; 0x3c
    13b8:	ad af       	std	Y+61, r26	; 0x3d
    13ba:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    13be:	7c ad       	ldd	r23, Y+60	; 0x3c
    13c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    13c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    13c4:	2b ea       	ldi	r18, 0xAB	; 171
    13c6:	3a ea       	ldi	r19, 0xAA	; 170
    13c8:	4a e2       	ldi	r20, 0x2A	; 42
    13ca:	50 e4       	ldi	r21, 0x40	; 64
    13cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	8f ab       	std	Y+55, r24	; 0x37
    13d6:	98 af       	std	Y+56, r25	; 0x38
    13d8:	a9 af       	std	Y+57, r26	; 0x39
    13da:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    13dc:	6f a9       	ldd	r22, Y+55	; 0x37
    13de:	78 ad       	ldd	r23, Y+56	; 0x38
    13e0:	89 ad       	ldd	r24, Y+57	; 0x39
    13e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e8       	ldi	r20, 0x80	; 128
    13ea:	5f e3       	ldi	r21, 0x3F	; 63
    13ec:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	1c f4       	brge	.+6      	; 0x13fa <Lcd_vidInit+0x1d0>
		__ticks = 1;
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	8e ab       	std	Y+54, r24	; 0x36
    13f8:	91 c0       	rjmp	.+290    	; 0x151c <Lcd_vidInit+0x2f2>
	else if (__tmp > 255)
    13fa:	6f a9       	ldd	r22, Y+55	; 0x37
    13fc:	78 ad       	ldd	r23, Y+56	; 0x38
    13fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1400:	9a ad       	ldd	r25, Y+58	; 0x3a
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	53 e4       	ldi	r21, 0x43	; 67
    140a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	0c f0       	brlt	.+2      	; 0x1414 <Lcd_vidInit+0x1ea>
    1412:	7b c0       	rjmp	.+246    	; 0x150a <Lcd_vidInit+0x2e0>
	{
		_delay_ms(__us / 1000.0);
    1414:	6b ad       	ldd	r22, Y+59	; 0x3b
    1416:	7c ad       	ldd	r23, Y+60	; 0x3c
    1418:	8d ad       	ldd	r24, Y+61	; 0x3d
    141a:	9e ad       	ldd	r25, Y+62	; 0x3e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	4a e7       	ldi	r20, 0x7A	; 122
    1422:	54 e4       	ldi	r21, 0x44	; 68
    1424:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	8a ab       	std	Y+50, r24	; 0x32
    142e:	9b ab       	std	Y+51, r25	; 0x33
    1430:	ac ab       	std	Y+52, r26	; 0x34
    1432:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6a a9       	ldd	r22, Y+50	; 0x32
    1436:	7b a9       	ldd	r23, Y+51	; 0x33
    1438:	8c a9       	ldd	r24, Y+52	; 0x34
    143a:	9d a9       	ldd	r25, Y+53	; 0x35
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8e a7       	std	Y+46, r24	; 0x2e
    144e:	9f a7       	std	Y+47, r25	; 0x2f
    1450:	a8 ab       	std	Y+48, r26	; 0x30
    1452:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1454:	6e a5       	ldd	r22, Y+46	; 0x2e
    1456:	7f a5       	ldd	r23, Y+47	; 0x2f
    1458:	88 a9       	ldd	r24, Y+48	; 0x30
    145a:	99 a9       	ldd	r25, Y+49	; 0x31
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <Lcd_vidInit+0x24c>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9d a7       	std	Y+45, r25	; 0x2d
    1472:	8c a7       	std	Y+44, r24	; 0x2c
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <Lcd_vidInit+0x2ca>
	else if (__tmp > 65535)
    1476:	6e a5       	ldd	r22, Y+46	; 0x2e
    1478:	7f a5       	ldd	r23, Y+47	; 0x2f
    147a:	88 a9       	ldd	r24, Y+48	; 0x30
    147c:	99 a9       	ldd	r25, Y+49	; 0x31
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <Lcd_vidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6a a9       	ldd	r22, Y+50	; 0x32
    1490:	7b a9       	ldd	r23, Y+51	; 0x33
    1492:	8c a9       	ldd	r24, Y+52	; 0x34
    1494:	9d a9       	ldd	r25, Y+53	; 0x35
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9d a7       	std	Y+45, r25	; 0x2d
    14b4:	8c a7       	std	Y+44, r24	; 0x2c
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <Lcd_vidInit+0x2ac>
    14b8:	88 ec       	ldi	r24, 0xC8	; 200
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9b a7       	std	Y+43, r25	; 0x2b
    14be:	8a a7       	std	Y+42, r24	; 0x2a
    14c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    14c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <Lcd_vidInit+0x29a>
    14c8:	9b a7       	std	Y+43, r25	; 0x2b
    14ca:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    14ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9d a7       	std	Y+45, r25	; 0x2d
    14d4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    14d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <Lcd_vidInit+0x28e>
    14de:	24 c0       	rjmp	.+72     	; 0x1528 <Lcd_vidInit+0x2fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6e a5       	ldd	r22, Y+46	; 0x2e
    14e2:	7f a5       	ldd	r23, Y+47	; 0x2f
    14e4:	88 a9       	ldd	r24, Y+48	; 0x30
    14e6:	99 a9       	ldd	r25, Y+49	; 0x31
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9d a7       	std	Y+45, r25	; 0x2d
    14f2:	8c a7       	std	Y+44, r24	; 0x2c
    14f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    14f8:	99 a7       	std	Y+41, r25	; 0x29
    14fa:	88 a7       	std	Y+40, r24	; 0x28
    14fc:	88 a5       	ldd	r24, Y+40	; 0x28
    14fe:	99 a5       	ldd	r25, Y+41	; 0x29
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <Lcd_vidInit+0x2d6>
    1504:	99 a7       	std	Y+41, r25	; 0x29
    1506:	88 a7       	std	Y+40, r24	; 0x28
    1508:	0f c0       	rjmp	.+30     	; 0x1528 <Lcd_vidInit+0x2fe>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    150a:	6f a9       	ldd	r22, Y+55	; 0x37
    150c:	78 ad       	ldd	r23, Y+56	; 0x38
    150e:	89 ad       	ldd	r24, Y+57	; 0x39
    1510:	9a ad       	ldd	r25, Y+58	; 0x3a
    1512:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	8e ab       	std	Y+54, r24	; 0x36
    151c:	8e a9       	ldd	r24, Y+54	; 0x36
    151e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1520:	8f a1       	ldd	r24, Y+39	; 0x27
    1522:	8a 95       	dec	r24
    1524:	f1 f7       	brne	.-4      	; 0x1522 <Lcd_vidInit+0x2f8>
    1526:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(39);
	/*send the display control mode
	 *B=1	cursor blinks
	 *C=1	cursor displays
	 *D=1	display on */
	Lcd_u8SendPacket( LCD_DISPLAY_CONTROL , LCD_u8COMMAND);
    1528:	8f e0       	ldi	r24, 0x0F	; 15
    152a:	61 e0       	ldi	r22, 0x01	; 1
    152c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	ac e1       	ldi	r26, 0x1C	; 28
    1536:	b2 e4       	ldi	r27, 0x42	; 66
    1538:	8b a3       	std	Y+35, r24	; 0x23
    153a:	9c a3       	std	Y+36, r25	; 0x24
    153c:	ad a3       	std	Y+37, r26	; 0x25
    153e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1540:	6b a1       	ldd	r22, Y+35	; 0x23
    1542:	7c a1       	ldd	r23, Y+36	; 0x24
    1544:	8d a1       	ldd	r24, Y+37	; 0x25
    1546:	9e a1       	ldd	r25, Y+38	; 0x26
    1548:	2b ea       	ldi	r18, 0xAB	; 171
    154a:	3a ea       	ldi	r19, 0xAA	; 170
    154c:	4a e2       	ldi	r20, 0x2A	; 42
    154e:	50 e4       	ldi	r21, 0x40	; 64
    1550:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8f 8f       	std	Y+31, r24	; 0x1f
    155a:	98 a3       	std	Y+32, r25	; 0x20
    155c:	a9 a3       	std	Y+33, r26	; 0x21
    155e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1560:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1562:	78 a1       	ldd	r23, Y+32	; 0x20
    1564:	89 a1       	ldd	r24, Y+33	; 0x21
    1566:	9a a1       	ldd	r25, Y+34	; 0x22
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	1c f4       	brge	.+6      	; 0x157e <Lcd_vidInit+0x354>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	8e 8f       	std	Y+30, r24	; 0x1e
    157c:	91 c0       	rjmp	.+290    	; 0x16a0 <Lcd_vidInit+0x476>
	else if (__tmp > 255)
    157e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1580:	78 a1       	ldd	r23, Y+32	; 0x20
    1582:	89 a1       	ldd	r24, Y+33	; 0x21
    1584:	9a a1       	ldd	r25, Y+34	; 0x22
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	4f e7       	ldi	r20, 0x7F	; 127
    158c:	53 e4       	ldi	r21, 0x43	; 67
    158e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1592:	18 16       	cp	r1, r24
    1594:	0c f0       	brlt	.+2      	; 0x1598 <Lcd_vidInit+0x36e>
    1596:	7b c0       	rjmp	.+246    	; 0x168e <Lcd_vidInit+0x464>
	{
		_delay_ms(__us / 1000.0);
    1598:	6b a1       	ldd	r22, Y+35	; 0x23
    159a:	7c a1       	ldd	r23, Y+36	; 0x24
    159c:	8d a1       	ldd	r24, Y+37	; 0x25
    159e:	9e a1       	ldd	r25, Y+38	; 0x26
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a e7       	ldi	r20, 0x7A	; 122
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	8a 8f       	std	Y+26, r24	; 0x1a
    15b2:	9b 8f       	std	Y+27, r25	; 0x1b
    15b4:	ac 8f       	std	Y+28, r26	; 0x1c
    15b6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    15ba:	7b 8d       	ldd	r23, Y+27	; 0x1b
    15bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	8e 8b       	std	Y+22, r24	; 0x16
    15d2:	9f 8b       	std	Y+23, r25	; 0x17
    15d4:	a8 8f       	std	Y+24, r26	; 0x18
    15d6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    15d8:	6e 89       	ldd	r22, Y+22	; 0x16
    15da:	7f 89       	ldd	r23, Y+23	; 0x17
    15dc:	88 8d       	ldd	r24, Y+24	; 0x18
    15de:	99 8d       	ldd	r25, Y+25	; 0x19
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	40 e8       	ldi	r20, 0x80	; 128
    15e6:	5f e3       	ldi	r21, 0x3F	; 63
    15e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15ec:	88 23       	and	r24, r24
    15ee:	2c f4       	brge	.+10     	; 0x15fa <Lcd_vidInit+0x3d0>
		__ticks = 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9d 8b       	std	Y+21, r25	; 0x15
    15f6:	8c 8b       	std	Y+20, r24	; 0x14
    15f8:	3f c0       	rjmp	.+126    	; 0x1678 <Lcd_vidInit+0x44e>
	else if (__tmp > 65535)
    15fa:	6e 89       	ldd	r22, Y+22	; 0x16
    15fc:	7f 89       	ldd	r23, Y+23	; 0x17
    15fe:	88 8d       	ldd	r24, Y+24	; 0x18
    1600:	99 8d       	ldd	r25, Y+25	; 0x19
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	3f ef       	ldi	r19, 0xFF	; 255
    1606:	4f e7       	ldi	r20, 0x7F	; 127
    1608:	57 e4       	ldi	r21, 0x47	; 71
    160a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    160e:	18 16       	cp	r1, r24
    1610:	4c f5       	brge	.+82     	; 0x1664 <Lcd_vidInit+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1614:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1616:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1618:	9d 8d       	ldd	r25, Y+29	; 0x1d
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e2       	ldi	r20, 0x20	; 32
    1620:	51 e4       	ldi	r21, 0x41	; 65
    1622:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9d 8b       	std	Y+21, r25	; 0x15
    1638:	8c 8b       	std	Y+20, r24	; 0x14
    163a:	0f c0       	rjmp	.+30     	; 0x165a <Lcd_vidInit+0x430>
    163c:	88 ec       	ldi	r24, 0xC8	; 200
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	9b 8b       	std	Y+19, r25	; 0x13
    1642:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1644:	8a 89       	ldd	r24, Y+18	; 0x12
    1646:	9b 89       	ldd	r25, Y+19	; 0x13
    1648:	01 97       	sbiw	r24, 0x01	; 1
    164a:	f1 f7       	brne	.-4      	; 0x1648 <Lcd_vidInit+0x41e>
    164c:	9b 8b       	std	Y+19, r25	; 0x13
    164e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1650:	8c 89       	ldd	r24, Y+20	; 0x14
    1652:	9d 89       	ldd	r25, Y+21	; 0x15
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	9d 8b       	std	Y+21, r25	; 0x15
    1658:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165a:	8c 89       	ldd	r24, Y+20	; 0x14
    165c:	9d 89       	ldd	r25, Y+21	; 0x15
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	69 f7       	brne	.-38     	; 0x163c <Lcd_vidInit+0x412>
    1662:	24 c0       	rjmp	.+72     	; 0x16ac <Lcd_vidInit+0x482>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1664:	6e 89       	ldd	r22, Y+22	; 0x16
    1666:	7f 89       	ldd	r23, Y+23	; 0x17
    1668:	88 8d       	ldd	r24, Y+24	; 0x18
    166a:	99 8d       	ldd	r25, Y+25	; 0x19
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9d 8b       	std	Y+21, r25	; 0x15
    1676:	8c 8b       	std	Y+20, r24	; 0x14
    1678:	8c 89       	ldd	r24, Y+20	; 0x14
    167a:	9d 89       	ldd	r25, Y+21	; 0x15
    167c:	99 8b       	std	Y+17, r25	; 0x11
    167e:	88 8b       	std	Y+16, r24	; 0x10
    1680:	88 89       	ldd	r24, Y+16	; 0x10
    1682:	99 89       	ldd	r25, Y+17	; 0x11
    1684:	01 97       	sbiw	r24, 0x01	; 1
    1686:	f1 f7       	brne	.-4      	; 0x1684 <Lcd_vidInit+0x45a>
    1688:	99 8b       	std	Y+17, r25	; 0x11
    168a:	88 8b       	std	Y+16, r24	; 0x10
    168c:	0f c0       	rjmp	.+30     	; 0x16ac <Lcd_vidInit+0x482>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    168e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1690:	78 a1       	ldd	r23, Y+32	; 0x20
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	9a a1       	ldd	r25, Y+34	; 0x22
    1696:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8e 8f       	std	Y+30, r24	; 0x1e
    16a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    16a2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    16a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a6:	8a 95       	dec	r24
    16a8:	f1 f7       	brne	.-4      	; 0x16a6 <Lcd_vidInit+0x47c>
    16aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(39);
	/*send the Display clear Command
	 * */
	Lcd_u8SendPacket( LCD_DISPLAY_CLEAR , LCD_u8COMMAND);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    16b4:	8a e0       	ldi	r24, 0x0A	; 10
    16b6:	97 ed       	ldi	r25, 0xD7	; 215
    16b8:	a3 ec       	ldi	r26, 0xC3	; 195
    16ba:	bf e3       	ldi	r27, 0x3F	; 63
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
    16be:	9c 87       	std	Y+12, r25	; 0x0c
    16c0:	ad 87       	std	Y+13, r26	; 0x0d
    16c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a ef       	ldi	r20, 0xFA	; 250
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	8f 83       	std	Y+7, r24	; 0x07
    16de:	98 87       	std	Y+8, r25	; 0x08
    16e0:	a9 87       	std	Y+9, r26	; 0x09
    16e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e8       	ldi	r20, 0x80	; 128
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16f8:	88 23       	and	r24, r24
    16fa:	2c f4       	brge	.+10     	; 0x1706 <Lcd_vidInit+0x4dc>
		__ticks = 1;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	9e 83       	std	Y+6, r25	; 0x06
    1702:	8d 83       	std	Y+5, r24	; 0x05
    1704:	3f c0       	rjmp	.+126    	; 0x1784 <Lcd_vidInit+0x55a>
	else if (__tmp > 65535)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	3f ef       	ldi	r19, 0xFF	; 255
    1712:	4f e7       	ldi	r20, 0x7F	; 127
    1714:	57 e4       	ldi	r21, 0x47	; 71
    1716:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    171a:	18 16       	cp	r1, r24
    171c:	4c f5       	brge	.+82     	; 0x1770 <Lcd_vidInit+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1720:	7c 85       	ldd	r23, Y+12	; 0x0c
    1722:	8d 85       	ldd	r24, Y+13	; 0x0d
    1724:	9e 85       	ldd	r25, Y+14	; 0x0e
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <Lcd_vidInit+0x53c>
    1748:	88 ec       	ldi	r24, 0xC8	; 200
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <Lcd_vidInit+0x52a>
    1758:	9c 83       	std	Y+4, r25	; 0x04
    175a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1766:	8d 81       	ldd	r24, Y+5	; 0x05
    1768:	9e 81       	ldd	r25, Y+6	; 0x06
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	69 f7       	brne	.-38     	; 0x1748 <Lcd_vidInit+0x51e>
    176e:	14 c0       	rjmp	.+40     	; 0x1798 <Lcd_vidInit+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1770:	6f 81       	ldd	r22, Y+7	; 0x07
    1772:	78 85       	ldd	r23, Y+8	; 0x08
    1774:	89 85       	ldd	r24, Y+9	; 0x09
    1776:	9a 85       	ldd	r25, Y+10	; 0x0a
    1778:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	9a 81       	ldd	r25, Y+2	; 0x02
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	f1 f7       	brne	.-4      	; 0x1790 <Lcd_vidInit+0x566>
    1794:	9a 83       	std	Y+2, r25	; 0x02
    1796:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1.53);
	/*send the entry mode
	 * */
	Lcd_u8SendPacket( LCD_ENTRY_MODE , LCD_u8COMMAND);
    1798:	86 e0       	ldi	r24, 0x06	; 6
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
	//#ifdef LCD_4BIT_MODE
	/*intialize the 4 bit mode here*/
}
    17a0:	c4 5b       	subi	r28, 0xB4	; 180
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <Lcd_u8SendPacket>:


u8 Lcd_u8SendPacket(u8 Copy_u8Packet,u8 Copy_u8Type){
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	c3 56       	subi	r28, 0x63	; 99
    17c6:	d0 40       	sbci	r29, 0x00	; 0
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	fe 01       	movw	r30, r28
    17d4:	ef 59       	subi	r30, 0x9F	; 159
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 83       	st	Z, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	ee 59       	subi	r30, 0x9E	; 158
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	60 83       	st	Z, r22
	if(Copy_u8Type==LCD_u8COMMAND){
    17e2:	fe 01       	movw	r30, r28
    17e4:	ee 59       	subi	r30, 0x9E	; 158
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	80 81       	ld	r24, Z
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	09 f0       	breq	.+2      	; 0x17f0 <Lcd_u8SendPacket+0x38>
    17ee:	78 c2       	rjmp	.+1264   	; 0x1ce0 <Lcd_u8SendPacket+0x528>
		Dio_vidSetPinVal(LCD_u8RS_PIN,LCD_COMMAND);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8RW_PIN,LCD_u8WRITE);
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);
    1800:	82 e0       	ldi	r24, 0x02	; 2
    1802:	61 e0       	ldi	r22, 0x01	; 1
    1804:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Copy_u8Packet,BIT7));
    1808:	fe 01       	movw	r30, r28
    180a:	ef 59       	subi	r30, 0x9F	; 159
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	80 81       	ld	r24, Z
    1810:	98 2f       	mov	r25, r24
    1812:	99 1f       	adc	r25, r25
    1814:	99 27       	eor	r25, r25
    1816:	99 1f       	adc	r25, r25
    1818:	8a e0       	ldi	r24, 0x0A	; 10
    181a:	69 2f       	mov	r22, r25
    181c:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Copy_u8Packet,BIT6));
    1820:	fe 01       	movw	r30, r28
    1822:	ef 59       	subi	r30, 0x9F	; 159
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	80 81       	ld	r24, Z
    1828:	82 95       	swap	r24
    182a:	86 95       	lsr	r24
    182c:	86 95       	lsr	r24
    182e:	83 70       	andi	r24, 0x03	; 3
    1830:	98 2f       	mov	r25, r24
    1832:	91 70       	andi	r25, 0x01	; 1
    1834:	89 e0       	ldi	r24, 0x09	; 9
    1836:	69 2f       	mov	r22, r25
    1838:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Copy_u8Packet,BIT5));
    183c:	fe 01       	movw	r30, r28
    183e:	ef 59       	subi	r30, 0x9F	; 159
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	82 95       	swap	r24
    1846:	86 95       	lsr	r24
    1848:	87 70       	andi	r24, 0x07	; 7
    184a:	98 2f       	mov	r25, r24
    184c:	91 70       	andi	r25, 0x01	; 1
    184e:	88 e0       	ldi	r24, 0x08	; 8
    1850:	69 2f       	mov	r22, r25
    1852:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Copy_u8Packet,BIT4));
    1856:	fe 01       	movw	r30, r28
    1858:	ef 59       	subi	r30, 0x9F	; 159
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	82 95       	swap	r24
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	98 2f       	mov	r25, r24
    1864:	91 70       	andi	r25, 0x01	; 1
    1866:	87 e0       	ldi	r24, 0x07	; 7
    1868:	69 2f       	mov	r22, r25
    186a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Copy_u8Packet,BIT3));
    186e:	fe 01       	movw	r30, r28
    1870:	ef 59       	subi	r30, 0x9F	; 159
    1872:	ff 4f       	sbci	r31, 0xFF	; 255
    1874:	80 81       	ld	r24, Z
    1876:	86 95       	lsr	r24
    1878:	86 95       	lsr	r24
    187a:	86 95       	lsr	r24
    187c:	98 2f       	mov	r25, r24
    187e:	91 70       	andi	r25, 0x01	; 1
    1880:	86 e0       	ldi	r24, 0x06	; 6
    1882:	69 2f       	mov	r22, r25
    1884:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Copy_u8Packet,BIT2));
    1888:	fe 01       	movw	r30, r28
    188a:	ef 59       	subi	r30, 0x9F	; 159
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	86 95       	lsr	r24
    1892:	86 95       	lsr	r24
    1894:	98 2f       	mov	r25, r24
    1896:	91 70       	andi	r25, 0x01	; 1
    1898:	85 e0       	ldi	r24, 0x05	; 5
    189a:	69 2f       	mov	r22, r25
    189c:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Copy_u8Packet,BIT1));
    18a0:	fe 01       	movw	r30, r28
    18a2:	ef 59       	subi	r30, 0x9F	; 159
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	86 95       	lsr	r24
    18aa:	98 2f       	mov	r25, r24
    18ac:	91 70       	andi	r25, 0x01	; 1
    18ae:	84 e0       	ldi	r24, 0x04	; 4
    18b0:	69 2f       	mov	r22, r25
    18b2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Copy_u8Packet,BIT0));
    18b6:	fe 01       	movw	r30, r28
    18b8:	ef 59       	subi	r30, 0x9F	; 159
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	98 2f       	mov	r25, r24
    18c0:	91 70       	andi	r25, 0x01	; 1
    18c2:	83 e0       	ldi	r24, 0x03	; 3
    18c4:	69 2f       	mov	r22, r25
    18c6:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e3 5a       	subi	r30, 0xA3	; 163
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a8 e4       	ldi	r26, 0x48	; 72
    18d6:	b2 e4       	ldi	r27, 0x42	; 66
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18e0:	8e 01       	movw	r16, r28
    18e2:	07 5a       	subi	r16, 0xA7	; 167
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	e3 5a       	subi	r30, 0xA3	; 163
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	2b ea       	ldi	r18, 0xAB	; 171
    18f6:	3a ea       	ldi	r19, 0xAA	; 170
    18f8:	4a e2       	ldi	r20, 0x2A	; 42
    18fa:	50 e4       	ldi	r21, 0x40	; 64
    18fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	f8 01       	movw	r30, r16
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190e:	fe 01       	movw	r30, r28
    1910:	e7 5a       	subi	r30, 0xA7	; 167
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	34 f4       	brge	.+12     	; 0x1938 <Lcd_u8SendPacket+0x180>
		__ticks = 1;
    192c:	fe 01       	movw	r30, r28
    192e:	e8 5a       	subi	r30, 0xA8	; 168
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	80 83       	st	Z, r24
    1936:	e0 c0       	rjmp	.+448    	; 0x1af8 <Lcd_u8SendPacket+0x340>
	else if (__tmp > 255)
    1938:	fe 01       	movw	r30, r28
    193a:	e7 5a       	subi	r30, 0xA7	; 167
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	53 e4       	ldi	r21, 0x43	; 67
    194e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	0c f0       	brlt	.+2      	; 0x1958 <Lcd_u8SendPacket+0x1a0>
    1956:	c0 c0       	rjmp	.+384    	; 0x1ad8 <Lcd_u8SendPacket+0x320>
	{
		_delay_ms(__us / 1000.0);
    1958:	fe 01       	movw	r30, r28
    195a:	e3 5a       	subi	r30, 0xA3	; 163
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	4a e7       	ldi	r20, 0x7A	; 122
    196c:	54 e4       	ldi	r21, 0x44	; 68
    196e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	fe 01       	movw	r30, r28
    1978:	ec 5a       	subi	r30, 0xAC	; 172
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 83       	st	Z, r24
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	a2 83       	std	Z+2, r26	; 0x02
    1982:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	8e 01       	movw	r16, r28
    1986:	00 5b       	subi	r16, 0xB0	; 176
    1988:	1f 4f       	sbci	r17, 0xFF	; 255
    198a:	fe 01       	movw	r30, r28
    198c:	ec 5a       	subi	r30, 0xAC	; 172
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	a2 83       	std	Z+2, r26	; 0x02
    19b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b2:	fe 01       	movw	r30, r28
    19b4:	e0 5b       	subi	r30, 0xB0	; 176
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	60 81       	ld	r22, Z
    19ba:	71 81       	ldd	r23, Z+1	; 0x01
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f e3       	ldi	r21, 0x3F	; 63
    19c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19cc:	88 23       	and	r24, r24
    19ce:	44 f4       	brge	.+16     	; 0x19e0 <Lcd_u8SendPacket+0x228>
		__ticks = 1;
    19d0:	fe 01       	movw	r30, r28
    19d2:	e2 5b       	subi	r30, 0xB2	; 178
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
    19de:	64 c0       	rjmp	.+200    	; 0x1aa8 <Lcd_u8SendPacket+0x2f0>
	else if (__tmp > 65535)
    19e0:	fe 01       	movw	r30, r28
    19e2:	e0 5b       	subi	r30, 0xB0	; 176
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	60 81       	ld	r22, Z
    19e8:	71 81       	ldd	r23, Z+1	; 0x01
    19ea:	82 81       	ldd	r24, Z+2	; 0x02
    19ec:	93 81       	ldd	r25, Z+3	; 0x03
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	3f ef       	ldi	r19, 0xFF	; 255
    19f2:	4f e7       	ldi	r20, 0x7F	; 127
    19f4:	57 e4       	ldi	r21, 0x47	; 71
    19f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19fa:	18 16       	cp	r1, r24
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <Lcd_u8SendPacket+0x248>
    19fe:	43 c0       	rjmp	.+134    	; 0x1a86 <Lcd_u8SendPacket+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	fe 01       	movw	r30, r28
    1a02:	ec 5a       	subi	r30, 0xAC	; 172
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	60 81       	ld	r22, Z
    1a08:	71 81       	ldd	r23, Z+1	; 0x01
    1a0a:	82 81       	ldd	r24, Z+2	; 0x02
    1a0c:	93 81       	ldd	r25, Z+3	; 0x03
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	40 e2       	ldi	r20, 0x20	; 32
    1a14:	51 e4       	ldi	r21, 0x41	; 65
    1a16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8e 01       	movw	r16, r28
    1a20:	02 5b       	subi	r16, 0xB2	; 178
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	f8 01       	movw	r30, r16
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    1a36:	1f c0       	rjmp	.+62     	; 0x1a76 <Lcd_u8SendPacket+0x2be>
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e4 5b       	subi	r30, 0xB4	; 180
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	fe 01       	movw	r30, r28
    1a48:	e4 5b       	subi	r30, 0xB4	; 180
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <Lcd_u8SendPacket+0x298>
    1a54:	fe 01       	movw	r30, r28
    1a56:	e4 5b       	subi	r30, 0xB4	; 180
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	de 01       	movw	r26, r28
    1a60:	a2 5b       	subi	r26, 0xB2	; 178
    1a62:	bf 4f       	sbci	r27, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	e2 5b       	subi	r30, 0xB2	; 178
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	11 96       	adiw	r26, 0x01	; 1
    1a72:	9c 93       	st	X, r25
    1a74:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a76:	fe 01       	movw	r30, r28
    1a78:	e2 5b       	subi	r30, 0xB2	; 178
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	d1 f6       	brne	.-76     	; 0x1a38 <Lcd_u8SendPacket+0x280>
    1a84:	4b c0       	rjmp	.+150    	; 0x1b1c <Lcd_u8SendPacket+0x364>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a86:	8e 01       	movw	r16, r28
    1a88:	02 5b       	subi	r16, 0xB2	; 178
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e0 5b       	subi	r30, 0xB0	; 176
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
    1aa8:	de 01       	movw	r26, r28
    1aaa:	a6 5b       	subi	r26, 0xB6	; 182
    1aac:	bf 4f       	sbci	r27, 0xFF	; 255
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e2 5b       	subi	r30, 0xB2	; 178
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	11 96       	adiw	r26, 0x01	; 1
    1aba:	9c 93       	st	X, r25
    1abc:	8e 93       	st	-X, r24
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e6 5b       	subi	r30, 0xB6	; 182
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	01 97       	sbiw	r24, 0x01	; 1
    1aca:	f1 f7       	brne	.-4      	; 0x1ac8 <Lcd_u8SendPacket+0x310>
    1acc:	fe 01       	movw	r30, r28
    1ace:	e6 5b       	subi	r30, 0xB6	; 182
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	91 83       	std	Z+1, r25	; 0x01
    1ad4:	80 83       	st	Z, r24
    1ad6:	22 c0       	rjmp	.+68     	; 0x1b1c <Lcd_u8SendPacket+0x364>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ad8:	8e 01       	movw	r16, r28
    1ada:	08 5a       	subi	r16, 0xA8	; 168
    1adc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e7 5a       	subi	r30, 0xA7	; 167
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	f8 01       	movw	r30, r16
    1af6:	80 83       	st	Z, r24
    1af8:	de 01       	movw	r26, r28
    1afa:	a7 5b       	subi	r26, 0xB7	; 183
    1afc:	bf 4f       	sbci	r27, 0xFF	; 255
    1afe:	fe 01       	movw	r30, r28
    1b00:	e8 5a       	subi	r30, 0xA8	; 168
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e7 5b       	subi	r30, 0xB7	; 183
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	8a 95       	dec	r24
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <Lcd_u8SendPacket+0x358>
    1b14:	fe 01       	movw	r30, r28
    1b16:	e7 5b       	subi	r30, 0xB7	; 183
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 83       	st	Z, r24
		_delay_us(50); // wait until the data reach the LCD
		Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); // then close enable to start reading
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	60 e0       	ldi	r22, 0x00	; 0
    1b20:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    1b24:	fe 01       	movw	r30, r28
    1b26:	eb 5b       	subi	r30, 0xBB	; 187
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a8 e4       	ldi	r26, 0x48	; 72
    1b30:	b2 e4       	ldi	r27, 0x42	; 66
    1b32:	80 83       	st	Z, r24
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	a2 83       	std	Z+2, r26	; 0x02
    1b38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b3a:	8e 01       	movw	r16, r28
    1b3c:	0f 5b       	subi	r16, 0xBF	; 191
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	fe 01       	movw	r30, r28
    1b42:	eb 5b       	subi	r30, 0xBB	; 187
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	2b ea       	ldi	r18, 0xAB	; 171
    1b50:	3a ea       	ldi	r19, 0xAA	; 170
    1b52:	4a e2       	ldi	r20, 0x2A	; 42
    1b54:	50 e4       	ldi	r21, 0x40	; 64
    1b56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	cb 01       	movw	r24, r22
    1b5e:	f8 01       	movw	r30, r16
    1b60:	80 83       	st	Z, r24
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ef 5b       	subi	r30, 0xBF	; 191
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	60 81       	ld	r22, Z
    1b70:	71 81       	ldd	r23, Z+1	; 0x01
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	34 f4       	brge	.+12     	; 0x1b92 <Lcd_u8SendPacket+0x3da>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e0 5c       	subi	r30, 0xC0	; 192
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 83       	st	Z, r24
    1b90:	9d c0       	rjmp	.+314    	; 0x1ccc <Lcd_u8SendPacket+0x514>
	else if (__tmp > 255)
    1b92:	fe 01       	movw	r30, r28
    1b94:	ef 5b       	subi	r30, 0xBF	; 191
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	53 e4       	ldi	r21, 0x43	; 67
    1ba8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	0c f0       	brlt	.+2      	; 0x1bb2 <Lcd_u8SendPacket+0x3fa>
    1bb0:	7e c0       	rjmp	.+252    	; 0x1cae <Lcd_u8SendPacket+0x4f6>
	{
		_delay_ms(__us / 1000.0);
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	eb 5b       	subi	r30, 0xBB	; 187
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	4a e7       	ldi	r20, 0x7A	; 122
    1bc6:	54 e4       	ldi	r21, 0x44	; 68
    1bc8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	8c af       	std	Y+60, r24	; 0x3c
    1bd2:	9d af       	std	Y+61, r25	; 0x3d
    1bd4:	ae af       	std	Y+62, r26	; 0x3e
    1bd6:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bda:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bde:	9f ad       	ldd	r25, Y+63	; 0x3f
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	88 af       	std	Y+56, r24	; 0x38
    1bf2:	99 af       	std	Y+57, r25	; 0x39
    1bf4:	aa af       	std	Y+58, r26	; 0x3a
    1bf6:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1bf8:	68 ad       	ldd	r22, Y+56	; 0x38
    1bfa:	79 ad       	ldd	r23, Y+57	; 0x39
    1bfc:	8a ad       	ldd	r24, Y+58	; 0x3a
    1bfe:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	40 e8       	ldi	r20, 0x80	; 128
    1c06:	5f e3       	ldi	r21, 0x3F	; 63
    1c08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c0c:	88 23       	and	r24, r24
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <Lcd_u8SendPacket+0x462>
		__ticks = 1;
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9f ab       	std	Y+55, r25	; 0x37
    1c16:	8e ab       	std	Y+54, r24	; 0x36
    1c18:	3f c0       	rjmp	.+126    	; 0x1c98 <Lcd_u8SendPacket+0x4e0>
	else if (__tmp > 65535)
    1c1a:	68 ad       	ldd	r22, Y+56	; 0x38
    1c1c:	79 ad       	ldd	r23, Y+57	; 0x39
    1c1e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c20:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	3f ef       	ldi	r19, 0xFF	; 255
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	57 e4       	ldi	r21, 0x47	; 71
    1c2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	4c f5       	brge	.+82     	; 0x1c84 <Lcd_u8SendPacket+0x4cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c34:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c36:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c38:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	cd 01       	movw	r24, r26
    1c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9f ab       	std	Y+55, r25	; 0x37
    1c58:	8e ab       	std	Y+54, r24	; 0x36
    1c5a:	0f c0       	rjmp	.+30     	; 0x1c7a <Lcd_u8SendPacket+0x4c2>
    1c5c:	88 ec       	ldi	r24, 0xC8	; 200
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9d ab       	std	Y+53, r25	; 0x35
    1c62:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c64:	8c a9       	ldd	r24, Y+52	; 0x34
    1c66:	9d a9       	ldd	r25, Y+53	; 0x35
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <Lcd_u8SendPacket+0x4b0>
    1c6c:	9d ab       	std	Y+53, r25	; 0x35
    1c6e:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	8e a9       	ldd	r24, Y+54	; 0x36
    1c72:	9f a9       	ldd	r25, Y+55	; 0x37
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	9f ab       	std	Y+55, r25	; 0x37
    1c78:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7a:	8e a9       	ldd	r24, Y+54	; 0x36
    1c7c:	9f a9       	ldd	r25, Y+55	; 0x37
    1c7e:	00 97       	sbiw	r24, 0x00	; 0
    1c80:	69 f7       	brne	.-38     	; 0x1c5c <Lcd_u8SendPacket+0x4a4>
    1c82:	28 c2       	rjmp	.+1104   	; 0x20d4 <Lcd_u8SendPacket+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c84:	68 ad       	ldd	r22, Y+56	; 0x38
    1c86:	79 ad       	ldd	r23, Y+57	; 0x39
    1c88:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c8a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	9f ab       	std	Y+55, r25	; 0x37
    1c96:	8e ab       	std	Y+54, r24	; 0x36
    1c98:	8e a9       	ldd	r24, Y+54	; 0x36
    1c9a:	9f a9       	ldd	r25, Y+55	; 0x37
    1c9c:	9b ab       	std	Y+51, r25	; 0x33
    1c9e:	8a ab       	std	Y+50, r24	; 0x32
    1ca0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ca2:	9b a9       	ldd	r25, Y+51	; 0x33
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <Lcd_u8SendPacket+0x4ec>
    1ca8:	9b ab       	std	Y+51, r25	; 0x33
    1caa:	8a ab       	std	Y+50, r24	; 0x32
    1cac:	13 c2       	rjmp	.+1062   	; 0x20d4 <Lcd_u8SendPacket+0x91c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cae:	fe 01       	movw	r30, r28
    1cb0:	ef 5b       	subi	r30, 0xBF	; 191
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	60 81       	ld	r22, Z
    1cb6:	71 81       	ldd	r23, Z+1	; 0x01
    1cb8:	82 81       	ldd	r24, Z+2	; 0x02
    1cba:	93 81       	ldd	r25, Z+3	; 0x03
    1cbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e0 5c       	subi	r30, 0xC0	; 192
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	80 83       	st	Z, r24
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e0 5c       	subi	r30, 0xC0	; 192
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cd6:	89 a9       	ldd	r24, Y+49	; 0x31
    1cd8:	8a 95       	dec	r24
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <Lcd_u8SendPacket+0x520>
    1cdc:	89 ab       	std	Y+49, r24	; 0x31
    1cde:	fa c1       	rjmp	.+1012   	; 0x20d4 <Lcd_u8SendPacket+0x91c>
		_delay_us(50);// reading time is 43 us
	}
	else if(Copy_u8Type==LCD_u8DATA){
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ee 59       	subi	r30, 0x9E	; 158
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	82 30       	cpi	r24, 0x02	; 2
    1cea:	09 f0       	breq	.+2      	; 0x1cee <Lcd_u8SendPacket+0x536>
    1cec:	ee c1       	rjmp	.+988    	; 0x20ca <Lcd_u8SendPacket+0x912>
		Dio_vidSetPinVal(LCD_u8RS_PIN,LCD_DATA);
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8RW_PIN,LCD_u8WRITE);
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8HIGH);
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
    1d00:	61 e0       	ldi	r22, 0x01	; 1
    1d02:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D7_PIN,GET_BIT(Copy_u8Packet,BIT7));
    1d06:	fe 01       	movw	r30, r28
    1d08:	ef 59       	subi	r30, 0x9F	; 159
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	80 81       	ld	r24, Z
    1d0e:	98 2f       	mov	r25, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	99 27       	eor	r25, r25
    1d14:	99 1f       	adc	r25, r25
    1d16:	8a e0       	ldi	r24, 0x0A	; 10
    1d18:	69 2f       	mov	r22, r25
    1d1a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D6_PIN,GET_BIT(Copy_u8Packet,BIT6));
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ef 59       	subi	r30, 0x9F	; 159
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	82 95       	swap	r24
    1d28:	86 95       	lsr	r24
    1d2a:	86 95       	lsr	r24
    1d2c:	83 70       	andi	r24, 0x03	; 3
    1d2e:	98 2f       	mov	r25, r24
    1d30:	91 70       	andi	r25, 0x01	; 1
    1d32:	89 e0       	ldi	r24, 0x09	; 9
    1d34:	69 2f       	mov	r22, r25
    1d36:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D5_PIN,GET_BIT(Copy_u8Packet,BIT5));
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	ef 59       	subi	r30, 0x9F	; 159
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 81       	ld	r24, Z
    1d42:	82 95       	swap	r24
    1d44:	86 95       	lsr	r24
    1d46:	87 70       	andi	r24, 0x07	; 7
    1d48:	98 2f       	mov	r25, r24
    1d4a:	91 70       	andi	r25, 0x01	; 1
    1d4c:	88 e0       	ldi	r24, 0x08	; 8
    1d4e:	69 2f       	mov	r22, r25
    1d50:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D4_PIN,GET_BIT(Copy_u8Packet,BIT4));
    1d54:	fe 01       	movw	r30, r28
    1d56:	ef 59       	subi	r30, 0x9F	; 159
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	82 95       	swap	r24
    1d5e:	8f 70       	andi	r24, 0x0F	; 15
    1d60:	98 2f       	mov	r25, r24
    1d62:	91 70       	andi	r25, 0x01	; 1
    1d64:	87 e0       	ldi	r24, 0x07	; 7
    1d66:	69 2f       	mov	r22, r25
    1d68:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D3_PIN,GET_BIT(Copy_u8Packet,BIT3));
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 59       	subi	r30, 0x9F	; 159
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	86 95       	lsr	r24
    1d76:	86 95       	lsr	r24
    1d78:	86 95       	lsr	r24
    1d7a:	98 2f       	mov	r25, r24
    1d7c:	91 70       	andi	r25, 0x01	; 1
    1d7e:	86 e0       	ldi	r24, 0x06	; 6
    1d80:	69 2f       	mov	r22, r25
    1d82:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D2_PIN,GET_BIT(Copy_u8Packet,BIT2));
    1d86:	fe 01       	movw	r30, r28
    1d88:	ef 59       	subi	r30, 0x9F	; 159
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	86 95       	lsr	r24
    1d90:	86 95       	lsr	r24
    1d92:	98 2f       	mov	r25, r24
    1d94:	91 70       	andi	r25, 0x01	; 1
    1d96:	85 e0       	ldi	r24, 0x05	; 5
    1d98:	69 2f       	mov	r22, r25
    1d9a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D1_PIN,GET_BIT(Copy_u8Packet,BIT1));
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ef 59       	subi	r30, 0x9F	; 159
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	86 95       	lsr	r24
    1da8:	98 2f       	mov	r25, r24
    1daa:	91 70       	andi	r25, 0x01	; 1
    1dac:	84 e0       	ldi	r24, 0x04	; 4
    1dae:	69 2f       	mov	r22, r25
    1db0:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		Dio_vidSetPinVal(LCD_u8D0_PIN,GET_BIT(Copy_u8Packet,BIT0));
    1db4:	fe 01       	movw	r30, r28
    1db6:	ef 59       	subi	r30, 0x9F	; 159
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	91 70       	andi	r25, 0x01	; 1
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	69 2f       	mov	r22, r25
    1dc4:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a8 e4       	ldi	r26, 0x48	; 72
    1dce:	b2 e4       	ldi	r27, 0x42	; 66
    1dd0:	8d a7       	std	Y+45, r24	; 0x2d
    1dd2:	9e a7       	std	Y+46, r25	; 0x2e
    1dd4:	af a7       	std	Y+47, r26	; 0x2f
    1dd6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dda:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ddc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dde:	98 a9       	ldd	r25, Y+48	; 0x30
    1de0:	2b ea       	ldi	r18, 0xAB	; 171
    1de2:	3a ea       	ldi	r19, 0xAA	; 170
    1de4:	4a e2       	ldi	r20, 0x2A	; 42
    1de6:	50 e4       	ldi	r21, 0x40	; 64
    1de8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	89 a7       	std	Y+41, r24	; 0x29
    1df2:	9a a7       	std	Y+42, r25	; 0x2a
    1df4:	ab a7       	std	Y+43, r26	; 0x2b
    1df6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1df8:	69 a5       	ldd	r22, Y+41	; 0x29
    1dfa:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e00:	20 e0       	ldi	r18, 0x00	; 0
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	40 e8       	ldi	r20, 0x80	; 128
    1e06:	5f e3       	ldi	r21, 0x3F	; 63
    1e08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	1c f4       	brge	.+6      	; 0x1e16 <Lcd_u8SendPacket+0x65e>
		__ticks = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	88 a7       	std	Y+40, r24	; 0x28
    1e14:	91 c0       	rjmp	.+290    	; 0x1f38 <Lcd_u8SendPacket+0x780>
	else if (__tmp > 255)
    1e16:	69 a5       	ldd	r22, Y+41	; 0x29
    1e18:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4f e7       	ldi	r20, 0x7F	; 127
    1e24:	53 e4       	ldi	r21, 0x43	; 67
    1e26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e2a:	18 16       	cp	r1, r24
    1e2c:	0c f0       	brlt	.+2      	; 0x1e30 <Lcd_u8SendPacket+0x678>
    1e2e:	7b c0       	rjmp	.+246    	; 0x1f26 <Lcd_u8SendPacket+0x76e>
	{
		_delay_ms(__us / 1000.0);
    1e30:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e32:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e36:	98 a9       	ldd	r25, Y+48	; 0x30
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	4a e7       	ldi	r20, 0x7A	; 122
    1e3e:	54 e4       	ldi	r21, 0x44	; 68
    1e40:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8c a3       	std	Y+36, r24	; 0x24
    1e4a:	9d a3       	std	Y+37, r25	; 0x25
    1e4c:	ae a3       	std	Y+38, r26	; 0x26
    1e4e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e50:	6c a1       	ldd	r22, Y+36	; 0x24
    1e52:	7d a1       	ldd	r23, Y+37	; 0x25
    1e54:	8e a1       	ldd	r24, Y+38	; 0x26
    1e56:	9f a1       	ldd	r25, Y+39	; 0x27
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a ef       	ldi	r20, 0xFA	; 250
    1e5e:	54 e4       	ldi	r21, 0x44	; 68
    1e60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	88 a3       	std	Y+32, r24	; 0x20
    1e6a:	99 a3       	std	Y+33, r25	; 0x21
    1e6c:	aa a3       	std	Y+34, r26	; 0x22
    1e6e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e70:	68 a1       	ldd	r22, Y+32	; 0x20
    1e72:	79 a1       	ldd	r23, Y+33	; 0x21
    1e74:	8a a1       	ldd	r24, Y+34	; 0x22
    1e76:	9b a1       	ldd	r25, Y+35	; 0x23
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	2c f4       	brge	.+10     	; 0x1e92 <Lcd_u8SendPacket+0x6da>
		__ticks = 1;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9f 8f       	std	Y+31, r25	; 0x1f
    1e8e:	8e 8f       	std	Y+30, r24	; 0x1e
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <Lcd_u8SendPacket+0x758>
	else if (__tmp > 65535)
    1e92:	68 a1       	ldd	r22, Y+32	; 0x20
    1e94:	79 a1       	ldd	r23, Y+33	; 0x21
    1e96:	8a a1       	ldd	r24, Y+34	; 0x22
    1e98:	9b a1       	ldd	r25, Y+35	; 0x23
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	3f ef       	ldi	r19, 0xFF	; 255
    1e9e:	4f e7       	ldi	r20, 0x7F	; 127
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ea6:	18 16       	cp	r1, r24
    1ea8:	4c f5       	brge	.+82     	; 0x1efc <Lcd_u8SendPacket+0x744>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	6c a1       	ldd	r22, Y+36	; 0x24
    1eac:	7d a1       	ldd	r23, Y+37	; 0x25
    1eae:	8e a1       	ldd	r24, Y+38	; 0x26
    1eb0:	9f a1       	ldd	r25, Y+39	; 0x27
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed0:	8e 8f       	std	Y+30, r24	; 0x1e
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <Lcd_u8SendPacket+0x73a>
    1ed4:	88 ec       	ldi	r24, 0xC8	; 200
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9d 8f       	std	Y+29, r25	; 0x1d
    1eda:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1edc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ede:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <Lcd_u8SendPacket+0x728>
    1ee4:	9d 8f       	std	Y+29, r25	; 0x1d
    1ee6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1eea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9f 8f       	std	Y+31, r25	; 0x1f
    1ef0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <Lcd_u8SendPacket+0x71c>
    1efa:	24 c0       	rjmp	.+72     	; 0x1f44 <Lcd_u8SendPacket+0x78c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	68 a1       	ldd	r22, Y+32	; 0x20
    1efe:	79 a1       	ldd	r23, Y+33	; 0x21
    1f00:	8a a1       	ldd	r24, Y+34	; 0x22
    1f02:	9b a1       	ldd	r25, Y+35	; 0x23
    1f04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f12:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f14:	9b 8f       	std	Y+27, r25	; 0x1b
    1f16:	8a 8f       	std	Y+26, r24	; 0x1a
    1f18:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f1a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f1c:	01 97       	sbiw	r24, 0x01	; 1
    1f1e:	f1 f7       	brne	.-4      	; 0x1f1c <Lcd_u8SendPacket+0x764>
    1f20:	9b 8f       	std	Y+27, r25	; 0x1b
    1f22:	8a 8f       	std	Y+26, r24	; 0x1a
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <Lcd_u8SendPacket+0x78c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f26:	69 a5       	ldd	r22, Y+41	; 0x29
    1f28:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f2a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f2c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	88 a7       	std	Y+40, r24	; 0x28
    1f38:	88 a5       	ldd	r24, Y+40	; 0x28
    1f3a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f3c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f3e:	8a 95       	dec	r24
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <Lcd_u8SendPacket+0x786>
    1f42:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(50); // wait until the data reach the LCD
		Dio_vidSetPinVal(LCD_u8EN_PIN,DIO_u8LOW); // then close enable to start reading
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a8 e4       	ldi	r26, 0x48	; 72
    1f52:	b2 e4       	ldi	r27, 0x42	; 66
    1f54:	8d 8b       	std	Y+21, r24	; 0x15
    1f56:	9e 8b       	std	Y+22, r25	; 0x16
    1f58:	af 8b       	std	Y+23, r26	; 0x17
    1f5a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f60:	8f 89       	ldd	r24, Y+23	; 0x17
    1f62:	98 8d       	ldd	r25, Y+24	; 0x18
    1f64:	2b ea       	ldi	r18, 0xAB	; 171
    1f66:	3a ea       	ldi	r19, 0xAA	; 170
    1f68:	4a e2       	ldi	r20, 0x2A	; 42
    1f6a:	50 e4       	ldi	r21, 0x40	; 64
    1f6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	89 8b       	std	Y+17, r24	; 0x11
    1f76:	9a 8b       	std	Y+18, r25	; 0x12
    1f78:	ab 8b       	std	Y+19, r26	; 0x13
    1f7a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f7c:	69 89       	ldd	r22, Y+17	; 0x11
    1f7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1f80:	8b 89       	ldd	r24, Y+19	; 0x13
    1f82:	9c 89       	ldd	r25, Y+20	; 0x14
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	1c f4       	brge	.+6      	; 0x1f9a <Lcd_u8SendPacket+0x7e2>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	88 8b       	std	Y+16, r24	; 0x10
    1f98:	91 c0       	rjmp	.+290    	; 0x20bc <Lcd_u8SendPacket+0x904>
	else if (__tmp > 255)
    1f9a:	69 89       	ldd	r22, Y+17	; 0x11
    1f9c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	53 e4       	ldi	r21, 0x43	; 67
    1faa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	0c f0       	brlt	.+2      	; 0x1fb4 <Lcd_u8SendPacket+0x7fc>
    1fb2:	7b c0       	rjmp	.+246    	; 0x20aa <Lcd_u8SendPacket+0x8f2>
	{
		_delay_ms(__us / 1000.0);
    1fb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fba:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	4a e7       	ldi	r20, 0x7A	; 122
    1fc2:	54 e4       	ldi	r21, 0x44	; 68
    1fc4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8c 87       	std	Y+12, r24	; 0x0c
    1fce:	9d 87       	std	Y+13, r25	; 0x0d
    1fd0:	ae 87       	std	Y+14, r26	; 0x0e
    1fd2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fd6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	4a ef       	ldi	r20, 0xFA	; 250
    1fe2:	54 e4       	ldi	r21, 0x44	; 68
    1fe4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	88 87       	std	Y+8, r24	; 0x08
    1fee:	99 87       	std	Y+9, r25	; 0x09
    1ff0:	aa 87       	std	Y+10, r26	; 0x0a
    1ff2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ff4:	68 85       	ldd	r22, Y+8	; 0x08
    1ff6:	79 85       	ldd	r23, Y+9	; 0x09
    1ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <Lcd_u8SendPacket+0x85e>
		__ticks = 1;
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9f 83       	std	Y+7, r25	; 0x07
    2012:	8e 83       	std	Y+6, r24	; 0x06
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <Lcd_u8SendPacket+0x8dc>
	else if (__tmp > 65535)
    2016:	68 85       	ldd	r22, Y+8	; 0x08
    2018:	79 85       	ldd	r23, Y+9	; 0x09
    201a:	8a 85       	ldd	r24, Y+10	; 0x0a
    201c:	9b 85       	ldd	r25, Y+11	; 0x0b
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	4c f5       	brge	.+82     	; 0x2080 <Lcd_u8SendPacket+0x8c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2030:	7d 85       	ldd	r23, Y+13	; 0x0d
    2032:	8e 85       	ldd	r24, Y+14	; 0x0e
    2034:	9f 85       	ldd	r25, Y+15	; 0x0f
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9f 83       	std	Y+7, r25	; 0x07
    2054:	8e 83       	std	Y+6, r24	; 0x06
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <Lcd_u8SendPacket+0x8be>
    2058:	88 ec       	ldi	r24, 0xC8	; 200
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9d 83       	std	Y+5, r25	; 0x05
    205e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	f1 f7       	brne	.-4      	; 0x2064 <Lcd_u8SendPacket+0x8ac>
    2068:	9d 83       	std	Y+5, r25	; 0x05
    206a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    206c:	8e 81       	ldd	r24, Y+6	; 0x06
    206e:	9f 81       	ldd	r25, Y+7	; 0x07
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9f 83       	std	Y+7, r25	; 0x07
    2074:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2076:	8e 81       	ldd	r24, Y+6	; 0x06
    2078:	9f 81       	ldd	r25, Y+7	; 0x07
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	69 f7       	brne	.-38     	; 0x2058 <Lcd_u8SendPacket+0x8a0>
    207e:	2a c0       	rjmp	.+84     	; 0x20d4 <Lcd_u8SendPacket+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2080:	68 85       	ldd	r22, Y+8	; 0x08
    2082:	79 85       	ldd	r23, Y+9	; 0x09
    2084:	8a 85       	ldd	r24, Y+10	; 0x0a
    2086:	9b 85       	ldd	r25, Y+11	; 0x0b
    2088:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	9f 83       	std	Y+7, r25	; 0x07
    2092:	8e 83       	std	Y+6, r24	; 0x06
    2094:	8e 81       	ldd	r24, Y+6	; 0x06
    2096:	9f 81       	ldd	r25, Y+7	; 0x07
    2098:	9b 83       	std	Y+3, r25	; 0x03
    209a:	8a 83       	std	Y+2, r24	; 0x02
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	01 97       	sbiw	r24, 0x01	; 1
    20a2:	f1 f7       	brne	.-4      	; 0x20a0 <Lcd_u8SendPacket+0x8e8>
    20a4:	9b 83       	std	Y+3, r25	; 0x03
    20a6:	8a 83       	std	Y+2, r24	; 0x02
    20a8:	15 c0       	rjmp	.+42     	; 0x20d4 <Lcd_u8SendPacket+0x91c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20aa:	69 89       	ldd	r22, Y+17	; 0x11
    20ac:	7a 89       	ldd	r23, Y+18	; 0x12
    20ae:	8b 89       	ldd	r24, Y+19	; 0x13
    20b0:	9c 89       	ldd	r25, Y+20	; 0x14
    20b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	88 8b       	std	Y+16, r24	; 0x10
    20bc:	88 89       	ldd	r24, Y+16	; 0x10
    20be:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8a 95       	dec	r24
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <Lcd_u8SendPacket+0x90a>
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <Lcd_u8SendPacket+0x91c>
		_delay_us(50);// reading time is 43 us
	}
	else {
		return 1; // wrong param
    20ca:	f1 e0       	ldi	r31, 0x01	; 1
    20cc:	a4 96       	adiw	r28, 0x24	; 36
    20ce:	ff af       	std	Y+63, r31	; 0x3f
    20d0:	a4 97       	sbiw	r28, 0x24	; 36
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <Lcd_u8SendPacket+0x922>
	}
	return 0;
    20d4:	a4 96       	adiw	r28, 0x24	; 36
    20d6:	1f ae       	std	Y+63, r1	; 0x3f
    20d8:	a4 97       	sbiw	r28, 0x24	; 36
    20da:	a4 96       	adiw	r28, 0x24	; 36
    20dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    20de:	a4 97       	sbiw	r28, 0x24	; 36
}
    20e0:	cd 59       	subi	r28, 0x9D	; 157
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	cf 91       	pop	r28
    20f0:	df 91       	pop	r29
    20f2:	1f 91       	pop	r17
    20f4:	0f 91       	pop	r16
    20f6:	08 95       	ret

000020f8 <Lcd_u8WriteString>:


u8 Lcd_u8WriteString(const char *string){
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <Lcd_u8WriteString+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0b c0       	rjmp	.+22     	; 0x211e <Lcd_u8WriteString+0x26>
	/*string is a pointer to array of characters
	 * points to the 1st place in this array (1st charc)
	 * then i send it character by character
	 * */
	while((*string) != '\0'){
		Lcd_u8SendPacket((*string),LCD_u8DATA); //string[i] [] is like*
    2108:	e9 81       	ldd	r30, Y+1	; 0x01
    210a:	fa 81       	ldd	r31, Y+2	; 0x02
    210c:	80 81       	ld	r24, Z
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
		string++;
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
u8 Lcd_u8WriteString(const char *string){
	/*string is a pointer to array of characters
	 * points to the 1st place in this array (1st charc)
	 * then i send it character by character
	 * */
	while((*string) != '\0'){
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	80 81       	ld	r24, Z
    2124:	88 23       	and	r24, r24
    2126:	81 f7       	brne	.-32     	; 0x2108 <Lcd_u8WriteString+0x10>
		Lcd_u8SendPacket((*string),LCD_u8DATA); //string[i] [] is like*
		string++;
	}

	return 0;
    2128:	80 e0       	ldi	r24, 0x00	; 0
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <Lcd_u8GoTo>:


u8 Lcd_u8GoTo(u8 row,u8 col){
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <Lcd_u8GoTo+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <Lcd_u8GoTo+0x8>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	6a 83       	std	Y+2, r22	; 0x02
	/**/
	switch(row){
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	3d 83       	std	Y+5, r19	; 0x05
    214e:	2c 83       	std	Y+4, r18	; 0x04
    2150:	8c 81       	ldd	r24, Y+4	; 0x04
    2152:	9d 81       	ldd	r25, Y+5	; 0x05
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	31 f0       	breq	.+12     	; 0x2164 <Lcd_u8GoTo+0x30>
    2158:	2c 81       	ldd	r18, Y+4	; 0x04
    215a:	3d 81       	ldd	r19, Y+5	; 0x05
    215c:	21 30       	cpi	r18, 0x01	; 1
    215e:	31 05       	cpc	r19, r1
    2160:	39 f0       	breq	.+14     	; 0x2170 <Lcd_u8GoTo+0x3c>
    2162:	0c c0       	rjmp	.+24     	; 0x217c <Lcd_u8GoTo+0x48>
	case 0:
		Lcd_u8SendPacket((LCD_u8GOTO_ROW_1+col),LCD_u8COMMAND);
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	80 58       	subi	r24, 0x80	; 128
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    216e:	09 c0       	rjmp	.+18     	; 0x2182 <Lcd_u8GoTo+0x4e>
		break;
	case 1:
		Lcd_u8SendPacket((LCD_u8GOTO_ROW_2+col),LCD_u8COMMAND);
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	80 54       	subi	r24, 0x40	; 64
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <Lcd_u8GoTo+0x4e>
		break;
	default:
		return 1; // wrong param
    217c:	31 e0       	ldi	r19, 0x01	; 1
    217e:	3b 83       	std	Y+3, r19	; 0x03
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <Lcd_u8GoTo+0x50>
		break;
	}
	return 0;
    2182:	1b 82       	std	Y+3, r1	; 0x03
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <Lcd_u8SaveCustomChar>:


u8 Lcd_u8SaveCustomChar(u8 Index,u8 *Char){
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <Lcd_u8SaveCustomChar+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <Lcd_u8SaveCustomChar+0x8>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    21a4:	7c 83       	std	Y+4, r23	; 0x04
    21a6:	6b 83       	std	Y+3, r22	; 0x03
	/*CGRAM is 64 x 8 bit RAM
	 * every char is 8*5 and to write every char needs 8 bytes
	 * 64 place each place is a byte / 8 bytes (for 1 char)
	 *total number of char that can be stored in CGRAM = 8 {0 -> 7}
	 * */
	if(Index<8)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	88 30       	cpi	r24, 0x08	; 8
    21ac:	08 f5       	brcc	.+66     	; 0x21f0 <Lcd_u8SaveCustomChar+0x5a>
	{
		Lcd_u8SendPacket((LCD_u8WRITE_AT_CGRAM + (Index*8)),LCD_u8COMMAND);
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	88 2f       	mov	r24, r24
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	08 96       	adiw	r24, 0x08	; 8
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
		/* Command 0x40 + the location to write in CGRAM address */
		for(i=0;i<8;i++)
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	0f c0       	rjmp	.+30     	; 0x21ea <Lcd_u8SaveCustomChar+0x54>
			/* Write 8 byte for generation of 1 character */
			Lcd_u8SendPacket(Char[i],LCD_u8DATA);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	62 e0       	ldi	r22, 0x02	; 2
    21e0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
	 * */
	if(Index<8)
	{
		Lcd_u8SendPacket((LCD_u8WRITE_AT_CGRAM + (Index*8)),LCD_u8COMMAND);
		/* Command 0x40 + the location to write in CGRAM address */
		for(i=0;i<8;i++)
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	8f 5f       	subi	r24, 0xFF	; 255
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	88 30       	cpi	r24, 0x08	; 8
    21ee:	70 f3       	brcs	.-36     	; 0x21cc <Lcd_u8SaveCustomChar+0x36>
			/* Write 8 byte for generation of 1 character */
			Lcd_u8SendPacket(Char[i],LCD_u8DATA);
	}
	return 0;
    21f0:	80 e0       	ldi	r24, 0x00	; 0
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <Lcd_u8PrintCustomChar>:

u8 Lcd_u8PrintCustomChar(u8 Index){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01

	Lcd_u8SendPacket(Index,LCD_u8DATA);
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
	return 0;
    2214:	80 e0       	ldi	r24, 0x00	; 0
}
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <main>:
		0b00000000,
		0b00000000};



int main(void){
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	a0 97       	sbiw	r28, 0x20	; 32
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61

	u8 j=0;
    2232:	18 a2       	std	Y+32, r1	; 0x20
	u8 i=0;
    2234:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 stop_flag=1;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Loc_PressedKey=0;
    223a:	1d 8e       	std	Y+29, r1	; 0x1d

	Port_vidInit();
    223c:	0e 94 2c 14 	call	0x2858	; 0x2858 <Port_vidInit>
	Lcd_vidInit();
    2240:	0e 94 15 09 	call	0x122a	; 0x122a <Lcd_vidInit>
    2244:	2c c1       	rjmp	.+600    	; 0x249e <main+0x280>

	while (stop_flag){
		Loc_PressedKey=Keypad_u8GetKey();
    2246:	0e 94 3f 08 	call	0x107e	; 0x107e <Keypad_u8GetKey>
    224a:	8d 8f       	std	Y+29, r24	; 0x1d
		if(Loc_PressedKey=='6'){
    224c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224e:	86 33       	cpi	r24, 0x36	; 54
    2250:	81 f4       	brne	.+32     	; 0x2272 <main+0x54>
			Loc_PressedKey=0;
    2252:	1d 8e       	std	Y+29, r1	; 0x1d
			j++;
    2254:	88 a1       	ldd	r24, Y+32	; 0x20
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	88 a3       	std	Y+32, r24	; 0x20
			DC_Motor_vidTurnRight();
    225a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <DC_Motor_vidTurnRight>
			if (j>=15){
    225e:	88 a1       	ldd	r24, Y+32	; 0x20
    2260:	8f 30       	cpi	r24, 0x0F	; 15
    2262:	c0 f0       	brcs	.+48     	; 0x2294 <main+0x76>
				/*crash pattern*/
				Led_vidTurnOnLed(Led_enuId_0);
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Led_vidTurnOnLed>
				j=15;
    226a:	8f e0       	ldi	r24, 0x0F	; 15
    226c:	88 a3       	std	Y+32, r24	; 0x20
				stop_flag=0;
    226e:	1e 8e       	std	Y+30, r1	; 0x1e
    2270:	11 c0       	rjmp	.+34     	; 0x2294 <main+0x76>
			}
		}
		else if(Loc_PressedKey=='4'){
    2272:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2274:	84 33       	cpi	r24, 0x34	; 52
    2276:	71 f4       	brne	.+28     	; 0x2294 <main+0x76>
			Loc_PressedKey=0;
    2278:	1d 8e       	std	Y+29, r1	; 0x1d
			j--;
    227a:	88 a1       	ldd	r24, Y+32	; 0x20
    227c:	81 50       	subi	r24, 0x01	; 1
    227e:	88 a3       	std	Y+32, r24	; 0x20
			DC_Motor_vidTurnLeft();
    2280:	0e 94 ff 13 	call	0x27fe	; 0x27fe <DC_Motor_vidTurnLeft>
			if (j<=1){
    2284:	88 a1       	ldd	r24, Y+32	; 0x20
    2286:	82 30       	cpi	r24, 0x02	; 2
    2288:	28 f4       	brcc	.+10     	; 0x2294 <main+0x76>
				/*crash pattern*/
				Led_vidTurnOnLed(Led_enuId_0);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <Led_vidTurnOnLed>
				j=0;
    2290:	18 a2       	std	Y+32, r1	; 0x20
				stop_flag=0;
    2292:	1e 8e       	std	Y+30, r1	; 0x1e
			}
		}
		Lcd_u8SendPacket(LCD_DISPLAY_CLEAR,LCD_u8COMMAND);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <Lcd_u8SendPacket>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	a0 ec       	ldi	r26, 0xC0	; 192
    22a2:	bf e3       	ldi	r27, 0x3F	; 63
    22a4:	89 8f       	std	Y+25, r24	; 0x19
    22a6:	9a 8f       	std	Y+26, r25	; 0x1a
    22a8:	ab 8f       	std	Y+27, r26	; 0x1b
    22aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ac:	69 8d       	ldd	r22, Y+25	; 0x19
    22ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a ef       	ldi	r20, 0xFA	; 250
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	8d 8b       	std	Y+21, r24	; 0x15
    22c6:	9e 8b       	std	Y+22, r25	; 0x16
    22c8:	af 8b       	std	Y+23, r26	; 0x17
    22ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22cc:	6d 89       	ldd	r22, Y+21	; 0x15
    22ce:	7e 89       	ldd	r23, Y+22	; 0x16
    22d0:	8f 89       	ldd	r24, Y+23	; 0x17
    22d2:	98 8d       	ldd	r25, Y+24	; 0x18
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22e0:	88 23       	and	r24, r24
    22e2:	2c f4       	brge	.+10     	; 0x22ee <main+0xd0>
		__ticks = 1;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	9c 8b       	std	Y+20, r25	; 0x14
    22ea:	8b 8b       	std	Y+19, r24	; 0x13
    22ec:	3f c0       	rjmp	.+126    	; 0x236c <main+0x14e>
	else if (__tmp > 65535)
    22ee:	6d 89       	ldd	r22, Y+21	; 0x15
    22f0:	7e 89       	ldd	r23, Y+22	; 0x16
    22f2:	8f 89       	ldd	r24, Y+23	; 0x17
    22f4:	98 8d       	ldd	r25, Y+24	; 0x18
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	3f ef       	ldi	r19, 0xFF	; 255
    22fa:	4f e7       	ldi	r20, 0x7F	; 127
    22fc:	57 e4       	ldi	r21, 0x47	; 71
    22fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2302:	18 16       	cp	r1, r24
    2304:	4c f5       	brge	.+82     	; 0x2358 <main+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	69 8d       	ldd	r22, Y+25	; 0x19
    2308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    230c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e2       	ldi	r20, 0x20	; 32
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	bc 01       	movw	r22, r24
    2320:	cd 01       	movw	r24, r26
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	0f c0       	rjmp	.+30     	; 0x234e <main+0x130>
    2330:	88 ec       	ldi	r24, 0xC8	; 200
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9a 8b       	std	Y+18, r25	; 0x12
    2336:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2338:	89 89       	ldd	r24, Y+17	; 0x11
    233a:	9a 89       	ldd	r25, Y+18	; 0x12
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	f1 f7       	brne	.-4      	; 0x233c <main+0x11e>
    2340:	9a 8b       	std	Y+18, r25	; 0x12
    2342:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9c 8b       	std	Y+20, r25	; 0x14
    234c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234e:	8b 89       	ldd	r24, Y+19	; 0x13
    2350:	9c 89       	ldd	r25, Y+20	; 0x14
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	69 f7       	brne	.-38     	; 0x2330 <main+0x112>
    2356:	14 c0       	rjmp	.+40     	; 0x2380 <main+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2358:	6d 89       	ldd	r22, Y+21	; 0x15
    235a:	7e 89       	ldd	r23, Y+22	; 0x16
    235c:	8f 89       	ldd	r24, Y+23	; 0x17
    235e:	98 8d       	ldd	r25, Y+24	; 0x18
    2360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	9c 8b       	std	Y+20, r25	; 0x14
    236a:	8b 8b       	std	Y+19, r24	; 0x13
    236c:	8b 89       	ldd	r24, Y+19	; 0x13
    236e:	9c 89       	ldd	r25, Y+20	; 0x14
    2370:	98 8b       	std	Y+16, r25	; 0x10
    2372:	8f 87       	std	Y+15, r24	; 0x0f
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <main+0x15a>
    237c:	98 8b       	std	Y+16, r25	; 0x10
    237e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1.5); // should add this delay in LCD driver
		if(stop_flag==1){
    2380:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	41 f4       	brne	.+16     	; 0x2396 <main+0x178>
		Lcd_u8SaveCustomChar(0,car);
    2386:	28 e7       	ldi	r18, 0x78	; 120
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	b9 01       	movw	r22, r18
    238e:	0e 94 cb 10 	call	0x2196	; 0x2196 <Lcd_u8SaveCustomChar>
		i=0;
    2392:	1f 8e       	std	Y+31, r1	; 0x1f
    2394:	0b c0       	rjmp	.+22     	; 0x23ac <main+0x18e>
		}
		else if(stop_flag==0){
    2396:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2398:	88 23       	and	r24, r24
    239a:	41 f4       	brne	.+16     	; 0x23ac <main+0x18e>
		Lcd_u8SaveCustomChar(1,carcrash);
    239c:	20 e8       	ldi	r18, 0x80	; 128
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	b9 01       	movw	r22, r18
    23a4:	0e 94 cb 10 	call	0x2196	; 0x2196 <Lcd_u8SaveCustomChar>
		i=1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	8f 8f       	std	Y+31, r24	; 0x1f
		}
		Lcd_u8GoTo(1,j);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	68 a1       	ldd	r22, Y+32	; 0x20
    23b0:	0e 94 9a 10 	call	0x2134	; 0x2134 <Lcd_u8GoTo>
		Lcd_u8PrintCustomChar(i);
    23b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23b6:	0e 94 00 11 	call	0x2200	; 0x2200 <Lcd_u8PrintCustomChar>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a8 e4       	ldi	r26, 0x48	; 72
    23c0:	b2 e4       	ldi	r27, 0x42	; 66
    23c2:	8b 87       	std	Y+11, r24	; 0x0b
    23c4:	9c 87       	std	Y+12, r25	; 0x0c
    23c6:	ad 87       	std	Y+13, r26	; 0x0d
    23c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    23cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8f 83       	std	Y+7, r24	; 0x07
    23e4:	98 87       	std	Y+8, r25	; 0x08
    23e6:	a9 87       	std	Y+9, r26	; 0x09
    23e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ea:	6f 81       	ldd	r22, Y+7	; 0x07
    23ec:	78 85       	ldd	r23, Y+8	; 0x08
    23ee:	89 85       	ldd	r24, Y+9	; 0x09
    23f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <main+0x1ee>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9e 83       	std	Y+6, r25	; 0x06
    2408:	8d 83       	std	Y+5, r24	; 0x05
    240a:	3f c0       	rjmp	.+126    	; 0x248a <main+0x26c>
	else if (__tmp > 65535)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	6b 85       	ldd	r22, Y+11	; 0x0b
    2426:	7c 85       	ldd	r23, Y+12	; 0x0c
    2428:	8d 85       	ldd	r24, Y+13	; 0x0d
    242a:	9e 85       	ldd	r25, Y+14	; 0x0e
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
    244c:	0f c0       	rjmp	.+30     	; 0x246c <main+0x24e>
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <main+0x23c>
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	9e 83       	std	Y+6, r25	; 0x06
    246a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8d 81       	ldd	r24, Y+5	; 0x05
    246e:	9e 81       	ldd	r25, Y+6	; 0x06
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <main+0x230>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	6f 81       	ldd	r22, Y+7	; 0x07
    2478:	78 85       	ldd	r23, Y+8	; 0x08
    247a:	89 85       	ldd	r24, Y+9	; 0x09
    247c:	9a 85       	ldd	r25, Y+10	; 0x0a
    247e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	9a 81       	ldd	r25, Y+2	; 0x02
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main+0x278>
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
	u8 Loc_PressedKey=0;

	Port_vidInit();
	Lcd_vidInit();

	while (stop_flag){
    249e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a0:	88 23       	and	r24, r24
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <main+0x288>
    24a4:	d0 ce       	rjmp	.-608    	; 0x2246 <main+0x28>
		Lcd_u8PrintCustomChar(i);
		_delay_ms(50);

	}

	return 0;
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
}
    24aa:	a0 96       	adiw	r28, 0x20	; 32
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <Led_vidTurnOnLed>:

//extern u8 Led_au8LedConfig[10];


void Led_vidTurnOnLed(Led_tenuId Copy_enuLedId)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <Led_vidTurnOnLed+0x6>
    24c2:	0f 92       	push	r0
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
	//Dio_vidSetPinVal(Led_au8LedConfig[Copy_enuLedId],DIO_u8HIGH);

	switch (Copy_enuLedId){
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	28 2f       	mov	r18, r24
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	3b 83       	std	Y+3, r19	; 0x03
    24d2:	2a 83       	std	Y+2, r18	; 0x02
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	84 30       	cpi	r24, 0x04	; 4
    24da:	91 05       	cpc	r25, r1
    24dc:	09 f4       	brne	.+2      	; 0x24e0 <Led_vidTurnOnLed+0x24>
    24de:	55 c0       	rjmp	.+170    	; 0x258a <Led_vidTurnOnLed+0xce>
    24e0:	2a 81       	ldd	r18, Y+2	; 0x02
    24e2:	3b 81       	ldd	r19, Y+3	; 0x03
    24e4:	25 30       	cpi	r18, 0x05	; 5
    24e6:	31 05       	cpc	r19, r1
    24e8:	dc f4       	brge	.+54     	; 0x2520 <Led_vidTurnOnLed+0x64>
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	81 30       	cpi	r24, 0x01	; 1
    24f0:	91 05       	cpc	r25, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <Led_vidTurnOnLed+0x3a>
    24f4:	3b c0       	rjmp	.+118    	; 0x256c <Led_vidTurnOnLed+0xb0>
    24f6:	2a 81       	ldd	r18, Y+2	; 0x02
    24f8:	3b 81       	ldd	r19, Y+3	; 0x03
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	2c f4       	brge	.+10     	; 0x250a <Led_vidTurnOnLed+0x4e>
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	9b 81       	ldd	r25, Y+3	; 0x03
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f1       	breq	.+90     	; 0x2562 <Led_vidTurnOnLed+0xa6>
    2508:	5d c0       	rjmp	.+186    	; 0x25c4 <Led_vidTurnOnLed+0x108>
    250a:	2a 81       	ldd	r18, Y+2	; 0x02
    250c:	3b 81       	ldd	r19, Y+3	; 0x03
    250e:	22 30       	cpi	r18, 0x02	; 2
    2510:	31 05       	cpc	r19, r1
    2512:	89 f1       	breq	.+98     	; 0x2576 <Led_vidTurnOnLed+0xba>
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	83 30       	cpi	r24, 0x03	; 3
    251a:	91 05       	cpc	r25, r1
    251c:	89 f1       	breq	.+98     	; 0x2580 <Led_vidTurnOnLed+0xc4>
    251e:	52 c0       	rjmp	.+164    	; 0x25c4 <Led_vidTurnOnLed+0x108>
    2520:	2a 81       	ldd	r18, Y+2	; 0x02
    2522:	3b 81       	ldd	r19, Y+3	; 0x03
    2524:	27 30       	cpi	r18, 0x07	; 7
    2526:	31 05       	cpc	r19, r1
    2528:	09 f4       	brne	.+2      	; 0x252c <Led_vidTurnOnLed+0x70>
    252a:	3e c0       	rjmp	.+124    	; 0x25a8 <Led_vidTurnOnLed+0xec>
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	88 30       	cpi	r24, 0x08	; 8
    2532:	91 05       	cpc	r25, r1
    2534:	5c f4       	brge	.+22     	; 0x254c <Led_vidTurnOnLed+0x90>
    2536:	2a 81       	ldd	r18, Y+2	; 0x02
    2538:	3b 81       	ldd	r19, Y+3	; 0x03
    253a:	25 30       	cpi	r18, 0x05	; 5
    253c:	31 05       	cpc	r19, r1
    253e:	51 f1       	breq	.+84     	; 0x2594 <Led_vidTurnOnLed+0xd8>
    2540:	8a 81       	ldd	r24, Y+2	; 0x02
    2542:	9b 81       	ldd	r25, Y+3	; 0x03
    2544:	86 30       	cpi	r24, 0x06	; 6
    2546:	91 05       	cpc	r25, r1
    2548:	51 f1       	breq	.+84     	; 0x259e <Led_vidTurnOnLed+0xe2>
    254a:	3c c0       	rjmp	.+120    	; 0x25c4 <Led_vidTurnOnLed+0x108>
    254c:	2a 81       	ldd	r18, Y+2	; 0x02
    254e:	3b 81       	ldd	r19, Y+3	; 0x03
    2550:	28 30       	cpi	r18, 0x08	; 8
    2552:	31 05       	cpc	r19, r1
    2554:	71 f1       	breq	.+92     	; 0x25b2 <Led_vidTurnOnLed+0xf6>
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	9b 81       	ldd	r25, Y+3	; 0x03
    255a:	89 30       	cpi	r24, 0x09	; 9
    255c:	91 05       	cpc	r25, r1
    255e:	71 f1       	breq	.+92     	; 0x25bc <Led_vidTurnOnLed+0x100>
    2560:	31 c0       	rjmp	.+98     	; 0x25c4 <Led_vidTurnOnLed+0x108>
	case Led_enuId_0:
		Dio_vidSetPinVal(LED_u8ID_0,DIO_u8HIGH);
    2562:	8d e1       	ldi	r24, 0x1D	; 29
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    256a:	2c c0       	rjmp	.+88     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8HIGH);
    256c:	8c e1       	ldi	r24, 0x1C	; 28
    256e:	61 e0       	ldi	r22, 0x01	; 1
    2570:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    2574:	27 c0       	rjmp	.+78     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8HIGH);
    2576:	8b e1       	ldi	r24, 0x1B	; 27
    2578:	61 e0       	ldi	r22, 0x01	; 1
    257a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    257e:	22 c0       	rjmp	.+68     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8HIGH);
    2580:	8a e1       	ldi	r24, 0x1A	; 26
    2582:	61 e0       	ldi	r22, 0x01	; 1
    2584:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    2588:	1d c0       	rjmp	.+58     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8HIGH);
    258a:	89 e1       	ldi	r24, 0x19	; 25
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    2592:	18 c0       	rjmp	.+48     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8HIGH);
    2594:	88 e1       	ldi	r24, 0x18	; 24
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    259c:	13 c0       	rjmp	.+38     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8HIGH);
    259e:	86 e0       	ldi	r24, 0x06	; 6
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    25a6:	0e c0       	rjmp	.+28     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8HIGH);
    25a8:	87 e0       	ldi	r24, 0x07	; 7
    25aa:	61 e0       	ldi	r22, 0x01	; 1
    25ac:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    25b0:	09 c0       	rjmp	.+18     	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8HIGH);
    25b2:	88 e0       	ldi	r24, 0x08	; 8
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    25ba:	04 c0       	rjmp	.+8      	; 0x25c4 <Led_vidTurnOnLed+0x108>
		break;
	case Led_enuId_9:
		Dio_vidSetPinVal(LED_u8ID_9,DIO_u8HIGH);
    25bc:	89 e0       	ldi	r24, 0x09	; 9
    25be:	61 e0       	ldi	r22, 0x01	; 1
    25c0:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		break;
	default:
		break;
	}

}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <Led_vidTurnOffLed>:

void Led_vidTurnOffLed(Led_tenuId Copy_enuLedId)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <Led_vidTurnOffLed+0x6>
    25d6:	0f 92       	push	r0
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_enuLedId){
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	3b 83       	std	Y+3, r19	; 0x03
    25e6:	2a 83       	std	Y+2, r18	; 0x02
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	9b 81       	ldd	r25, Y+3	; 0x03
    25ec:	84 30       	cpi	r24, 0x04	; 4
    25ee:	91 05       	cpc	r25, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <Led_vidTurnOffLed+0x24>
    25f2:	55 c0       	rjmp	.+170    	; 0x269e <Led_vidTurnOffLed+0xce>
    25f4:	2a 81       	ldd	r18, Y+2	; 0x02
    25f6:	3b 81       	ldd	r19, Y+3	; 0x03
    25f8:	25 30       	cpi	r18, 0x05	; 5
    25fa:	31 05       	cpc	r19, r1
    25fc:	dc f4       	brge	.+54     	; 0x2634 <Led_vidTurnOffLed+0x64>
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	91 05       	cpc	r25, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <Led_vidTurnOffLed+0x3a>
    2608:	3b c0       	rjmp	.+118    	; 0x2680 <Led_vidTurnOffLed+0xb0>
    260a:	2a 81       	ldd	r18, Y+2	; 0x02
    260c:	3b 81       	ldd	r19, Y+3	; 0x03
    260e:	22 30       	cpi	r18, 0x02	; 2
    2610:	31 05       	cpc	r19, r1
    2612:	2c f4       	brge	.+10     	; 0x261e <Led_vidTurnOffLed+0x4e>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	00 97       	sbiw	r24, 0x00	; 0
    261a:	69 f1       	breq	.+90     	; 0x2676 <Led_vidTurnOffLed+0xa6>
    261c:	5d c0       	rjmp	.+186    	; 0x26d8 <Led_vidTurnOffLed+0x108>
    261e:	2a 81       	ldd	r18, Y+2	; 0x02
    2620:	3b 81       	ldd	r19, Y+3	; 0x03
    2622:	22 30       	cpi	r18, 0x02	; 2
    2624:	31 05       	cpc	r19, r1
    2626:	89 f1       	breq	.+98     	; 0x268a <Led_vidTurnOffLed+0xba>
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	9b 81       	ldd	r25, Y+3	; 0x03
    262c:	83 30       	cpi	r24, 0x03	; 3
    262e:	91 05       	cpc	r25, r1
    2630:	89 f1       	breq	.+98     	; 0x2694 <Led_vidTurnOffLed+0xc4>
    2632:	52 c0       	rjmp	.+164    	; 0x26d8 <Led_vidTurnOffLed+0x108>
    2634:	2a 81       	ldd	r18, Y+2	; 0x02
    2636:	3b 81       	ldd	r19, Y+3	; 0x03
    2638:	27 30       	cpi	r18, 0x07	; 7
    263a:	31 05       	cpc	r19, r1
    263c:	09 f4       	brne	.+2      	; 0x2640 <Led_vidTurnOffLed+0x70>
    263e:	3e c0       	rjmp	.+124    	; 0x26bc <Led_vidTurnOffLed+0xec>
    2640:	8a 81       	ldd	r24, Y+2	; 0x02
    2642:	9b 81       	ldd	r25, Y+3	; 0x03
    2644:	88 30       	cpi	r24, 0x08	; 8
    2646:	91 05       	cpc	r25, r1
    2648:	5c f4       	brge	.+22     	; 0x2660 <Led_vidTurnOffLed+0x90>
    264a:	2a 81       	ldd	r18, Y+2	; 0x02
    264c:	3b 81       	ldd	r19, Y+3	; 0x03
    264e:	25 30       	cpi	r18, 0x05	; 5
    2650:	31 05       	cpc	r19, r1
    2652:	51 f1       	breq	.+84     	; 0x26a8 <Led_vidTurnOffLed+0xd8>
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	86 30       	cpi	r24, 0x06	; 6
    265a:	91 05       	cpc	r25, r1
    265c:	51 f1       	breq	.+84     	; 0x26b2 <Led_vidTurnOffLed+0xe2>
    265e:	3c c0       	rjmp	.+120    	; 0x26d8 <Led_vidTurnOffLed+0x108>
    2660:	2a 81       	ldd	r18, Y+2	; 0x02
    2662:	3b 81       	ldd	r19, Y+3	; 0x03
    2664:	28 30       	cpi	r18, 0x08	; 8
    2666:	31 05       	cpc	r19, r1
    2668:	71 f1       	breq	.+92     	; 0x26c6 <Led_vidTurnOffLed+0xf6>
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	89 30       	cpi	r24, 0x09	; 9
    2670:	91 05       	cpc	r25, r1
    2672:	71 f1       	breq	.+92     	; 0x26d0 <Led_vidTurnOffLed+0x100>
    2674:	31 c0       	rjmp	.+98     	; 0x26d8 <Led_vidTurnOffLed+0x108>
	case Led_enuId_0:
		Dio_vidSetPinVal(LED_u8ID_0,DIO_u8LOW);
    2676:	8d e1       	ldi	r24, 0x1D	; 29
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    267e:	2c c0       	rjmp	.+88     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_1:
		Dio_vidSetPinVal(LED_u8ID_1,DIO_u8LOW);
    2680:	8c e1       	ldi	r24, 0x1C	; 28
    2682:	60 e0       	ldi	r22, 0x00	; 0
    2684:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    2688:	27 c0       	rjmp	.+78     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_2:
		Dio_vidSetPinVal(LED_u8ID_2,DIO_u8LOW);
    268a:	8b e1       	ldi	r24, 0x1B	; 27
    268c:	60 e0       	ldi	r22, 0x00	; 0
    268e:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    2692:	22 c0       	rjmp	.+68     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_3:
		Dio_vidSetPinVal(LED_u8ID_3,DIO_u8LOW);
    2694:	8a e1       	ldi	r24, 0x1A	; 26
    2696:	60 e0       	ldi	r22, 0x00	; 0
    2698:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    269c:	1d c0       	rjmp	.+58     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_4:
		Dio_vidSetPinVal(LED_u8ID_4,DIO_u8LOW);
    269e:	89 e1       	ldi	r24, 0x19	; 25
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    26a6:	18 c0       	rjmp	.+48     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_5:
		Dio_vidSetPinVal(LED_u8ID_5,DIO_u8LOW);
    26a8:	88 e1       	ldi	r24, 0x18	; 24
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    26b0:	13 c0       	rjmp	.+38     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_6:
		Dio_vidSetPinVal(LED_u8ID_6,DIO_u8LOW);
    26b2:	86 e0       	ldi	r24, 0x06	; 6
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    26ba:	0e c0       	rjmp	.+28     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_7:
		Dio_vidSetPinVal(LED_u8ID_7,DIO_u8LOW);
    26bc:	87 e0       	ldi	r24, 0x07	; 7
    26be:	60 e0       	ldi	r22, 0x00	; 0
    26c0:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    26c4:	09 c0       	rjmp	.+18     	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_8:
		Dio_vidSetPinVal(LED_u8ID_8,DIO_u8LOW);
    26c6:	88 e0       	ldi	r24, 0x08	; 8
    26c8:	60 e0       	ldi	r22, 0x00	; 0
    26ca:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <Led_vidTurnOffLed+0x108>
		break;
	case Led_enuId_9:
		Dio_vidSetPinVal(LED_u8ID_9,DIO_u8LOW);
    26d0:	89 e0       	ldi	r24, 0x09	; 9
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
		break;
	default:
		break;
	}
}
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <Led_vidTglLed>:

void Led_vidTglLed(Led_tenuId Copy_enuLedId)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <Led_vidTglLed+0x6>
    26ea:	0f 92       	push	r0
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_enuLedId){
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	3b 83       	std	Y+3, r19	; 0x03
    26fa:	2a 83       	std	Y+2, r18	; 0x02
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	84 30       	cpi	r24, 0x04	; 4
    2702:	91 05       	cpc	r25, r1
    2704:	09 f4       	brne	.+2      	; 0x2708 <Led_vidTglLed+0x24>
    2706:	4f c0       	rjmp	.+158    	; 0x27a6 <Led_vidTglLed+0xc2>
    2708:	2a 81       	ldd	r18, Y+2	; 0x02
    270a:	3b 81       	ldd	r19, Y+3	; 0x03
    270c:	25 30       	cpi	r18, 0x05	; 5
    270e:	31 05       	cpc	r19, r1
    2710:	d4 f4       	brge	.+52     	; 0x2746 <Led_vidTglLed+0x62>
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	9b 81       	ldd	r25, Y+3	; 0x03
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	91 05       	cpc	r25, r1
    271a:	c9 f1       	breq	.+114    	; 0x278e <Led_vidTglLed+0xaa>
    271c:	2a 81       	ldd	r18, Y+2	; 0x02
    271e:	3b 81       	ldd	r19, Y+3	; 0x03
    2720:	22 30       	cpi	r18, 0x02	; 2
    2722:	31 05       	cpc	r19, r1
    2724:	2c f4       	brge	.+10     	; 0x2730 <Led_vidTglLed+0x4c>
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	61 f1       	breq	.+88     	; 0x2786 <Led_vidTglLed+0xa2>
    272e:	52 c0       	rjmp	.+164    	; 0x27d4 <Led_vidTglLed+0xf0>
    2730:	2a 81       	ldd	r18, Y+2	; 0x02
    2732:	3b 81       	ldd	r19, Y+3	; 0x03
    2734:	22 30       	cpi	r18, 0x02	; 2
    2736:	31 05       	cpc	r19, r1
    2738:	71 f1       	breq	.+92     	; 0x2796 <Led_vidTglLed+0xb2>
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	83 30       	cpi	r24, 0x03	; 3
    2740:	91 05       	cpc	r25, r1
    2742:	69 f1       	breq	.+90     	; 0x279e <Led_vidTglLed+0xba>
    2744:	47 c0       	rjmp	.+142    	; 0x27d4 <Led_vidTglLed+0xf0>
    2746:	2a 81       	ldd	r18, Y+2	; 0x02
    2748:	3b 81       	ldd	r19, Y+3	; 0x03
    274a:	27 30       	cpi	r18, 0x07	; 7
    274c:	31 05       	cpc	r19, r1
    274e:	b9 f1       	breq	.+110    	; 0x27be <Led_vidTglLed+0xda>
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	88 30       	cpi	r24, 0x08	; 8
    2756:	91 05       	cpc	r25, r1
    2758:	5c f4       	brge	.+22     	; 0x2770 <Led_vidTglLed+0x8c>
    275a:	2a 81       	ldd	r18, Y+2	; 0x02
    275c:	3b 81       	ldd	r19, Y+3	; 0x03
    275e:	25 30       	cpi	r18, 0x05	; 5
    2760:	31 05       	cpc	r19, r1
    2762:	29 f1       	breq	.+74     	; 0x27ae <Led_vidTglLed+0xca>
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	9b 81       	ldd	r25, Y+3	; 0x03
    2768:	86 30       	cpi	r24, 0x06	; 6
    276a:	91 05       	cpc	r25, r1
    276c:	21 f1       	breq	.+72     	; 0x27b6 <Led_vidTglLed+0xd2>
    276e:	32 c0       	rjmp	.+100    	; 0x27d4 <Led_vidTglLed+0xf0>
    2770:	2a 81       	ldd	r18, Y+2	; 0x02
    2772:	3b 81       	ldd	r19, Y+3	; 0x03
    2774:	28 30       	cpi	r18, 0x08	; 8
    2776:	31 05       	cpc	r19, r1
    2778:	31 f1       	breq	.+76     	; 0x27c6 <Led_vidTglLed+0xe2>
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	9b 81       	ldd	r25, Y+3	; 0x03
    277e:	89 30       	cpi	r24, 0x09	; 9
    2780:	91 05       	cpc	r25, r1
    2782:	29 f1       	breq	.+74     	; 0x27ce <Led_vidTglLed+0xea>
    2784:	27 c0       	rjmp	.+78     	; 0x27d4 <Led_vidTglLed+0xf0>
	case Led_enuId_0:
		Dio_vidTglPinVal(LED_u8ID_0);
    2786:	8d e1       	ldi	r24, 0x1D	; 29
    2788:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    278c:	23 c0       	rjmp	.+70     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_1:
		Dio_vidTglPinVal(LED_u8ID_1);
    278e:	8c e1       	ldi	r24, 0x1C	; 28
    2790:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    2794:	1f c0       	rjmp	.+62     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_2:
		Dio_vidTglPinVal(LED_u8ID_2);
    2796:	8b e1       	ldi	r24, 0x1B	; 27
    2798:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    279c:	1b c0       	rjmp	.+54     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_3:
		Dio_vidTglPinVal(LED_u8ID_3);
    279e:	8a e1       	ldi	r24, 0x1A	; 26
    27a0:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27a4:	17 c0       	rjmp	.+46     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_4:
		Dio_vidTglPinVal(LED_u8ID_4);
    27a6:	89 e1       	ldi	r24, 0x19	; 25
    27a8:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27ac:	13 c0       	rjmp	.+38     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_5:
		Dio_vidTglPinVal(LED_u8ID_5);
    27ae:	88 e1       	ldi	r24, 0x18	; 24
    27b0:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27b4:	0f c0       	rjmp	.+30     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_6:
		Dio_vidTglPinVal(LED_u8ID_6);
    27b6:	86 e0       	ldi	r24, 0x06	; 6
    27b8:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27bc:	0b c0       	rjmp	.+22     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_7:
		Dio_vidTglPinVal(LED_u8ID_7);
    27be:	87 e0       	ldi	r24, 0x07	; 7
    27c0:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27c4:	07 c0       	rjmp	.+14     	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_8:
		Dio_vidTglPinVal(LED_u8ID_8);
    27c6:	88 e0       	ldi	r24, 0x08	; 8
    27c8:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <Led_vidTglLed+0xf0>
		break;
	case Led_enuId_9:
		Dio_vidTglPinVal(LED_u8ID_9);
    27ce:	89 e0       	ldi	r24, 0x09	; 9
    27d0:	0e 94 32 07 	call	0xe64	; 0xe64 <Dio_vidTglPinVal>
		break;
	default:
		break;
	}
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <DC_Motor_vidTurnRight>:
#include "Motor_int.h"
#include "Motor_cfg.h"

#if DC_MOTOR_u8CONTROL_MODE==DC_MOTOR_u8DIRECTION

void DC_Motor_vidTurnRight(void){
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62

	Dio_vidSetPinVal(DC_MOTOR_u8PIN_1,DIO_u8HIGH);
    27e8:	8f e1       	ldi	r24, 0x1F	; 31
    27ea:	61 e0       	ldi	r22, 0x01	; 1
    27ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
	Dio_vidSetPinVal(DC_MOTOR_u8PIN_2,DIO_u8LOW);
    27f0:	8e e1       	ldi	r24, 0x1E	; 30
    27f2:	60 e0       	ldi	r22, 0x00	; 0
    27f4:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>

}
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <DC_Motor_vidTurnLeft>:

void DC_Motor_vidTurnLeft(void){
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinVal(DC_MOTOR_u8PIN_1,DIO_u8LOW);
    2806:	8f e1       	ldi	r24, 0x1F	; 31
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
	Dio_vidSetPinVal(DC_MOTOR_u8PIN_2,DIO_u8HIGH);
    280e:	8e e1       	ldi	r24, 0x1E	; 30
    2810:	61 e0       	ldi	r22, 0x01	; 1
    2812:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
}
    2816:	cf 91       	pop	r28
    2818:	df 91       	pop	r29
    281a:	08 95       	ret

0000281c <DC_Motor_vidTurnOff>:

void DC_Motor_vidTurnOff(void){
    281c:	df 93       	push	r29
    281e:	cf 93       	push	r28
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62

	Dio_vidSetPinVal(DC_MOTOR_u8PIN_1,DIO_u8LOW);
    2824:	8f e1       	ldi	r24, 0x1F	; 31
    2826:	60 e0       	ldi	r22, 0x00	; 0
    2828:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
	Dio_vidSetPinVal(DC_MOTOR_u8PIN_2,DIO_u8LOW);
    282c:	8e e1       	ldi	r24, 0x1E	; 30
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
}
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <DC_Motor_vidBreak>:

void DC_Motor_vidBreak(void){
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62

	Dio_vidSetPinVal(DC_MOTOR_u8PIN_1,DIO_u8HIGH);
    2842:	8f e1       	ldi	r24, 0x1F	; 31
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>
	Dio_vidSetPinVal(DC_MOTOR_u8PIN_2,DIO_u8HIGH);
    284a:	8e e1       	ldi	r24, 0x1E	; 30
    284c:	61 e0       	ldi	r22, 0x01	; 1
    284e:	0e 94 47 06 	call	0xc8e	; 0xc8e <Dio_vidSetPinVal>

}
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <Port_vidInit>:

#include "../PORT_Peripheral/Port_int.h"
#include "../PORT_Peripheral/Port_priv.h"
#include "../PORT_Peripheral/Port_cfg.h"
void Port_vidInit(void)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62

#else
#warning "you have entered wrong initial mode for pin 31 , the default mode has been set (OUTPUT_LOW)"
#endif

DDRA=CONC(PORT_u8PIN_7_DEFAULT_DIR,PORT_u8PIN_6_DEFAULT_DIR,PORT_u8PIN_5_DEFAULT_DIR,PORT_u8PIN_4_DEFAULT_DIR,PORT_u8PIN_3_DEFAULT_DIR,PORT_u8PIN_2_DEFAULT_DIR,PORT_u8PIN_1_DEFAULT_DIR,PORT_u8PIN_0_DEFAULT_DIR);
    2860:	ea e3       	ldi	r30, 0x3A	; 58
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	8f ef       	ldi	r24, 0xFF	; 255
    2866:	80 83       	st	Z, r24
PORTA=CONC(PORT_u8PIN_7_DEFAULT_VALUE,PORT_u8PIN_6_DEFAULT_VALUE,PORT_u8PIN_5_DEFAULT_VALUE,PORT_u8PIN_4_DEFAULT_VALUE,PORT_u8PIN_3_DEFAULT_VALUE,PORT_u8PIN_2_DEFAULT_VALUE,PORT_u8PIN_1_DEFAULT_VALUE,PORT_u8PIN_0_DEFAULT_VALUE);
    2868:	eb e3       	ldi	r30, 0x3B	; 59
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	10 82       	st	Z, r1

DDRB=CONC(PORT_u8PIN_15_DEFAULT_DIR,PORT_u8PIN_14_DEFAULT_DIR,PORT_u8PIN_13_DEFAULT_DIR,PORT_u8PIN_12_DEFAULT_DIR,PORT_u8PIN_11_DEFAULT_DIR,PORT_u8PIN_10_DEFAULT_DIR,PORT_u8PIN_9_DEFAULT_DIR,PORT_u8PIN_8_DEFAULT_DIR);
    286e:	e7 e3       	ldi	r30, 0x37	; 55
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	8f ef       	ldi	r24, 0xFF	; 255
    2874:	80 83       	st	Z, r24
PORTB=CONC(PORT_u8PIN_15_DEFAULT_VALUE,PORT_u8PIN_14_DEFAULT_VALUE,PORT_u8PIN_13_DEFAULT_VALUE,PORT_u8PIN_12_DEFAULT_VALUE,PORT_u8PIN_11_DEFAULT_VALUE,PORT_u8PIN_10_DEFAULT_VALUE,PORT_u8PIN_9_DEFAULT_VALUE,PORT_u8PIN_8_DEFAULT_VALUE);
    2876:	e8 e3       	ldi	r30, 0x38	; 56
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	10 82       	st	Z, r1

DDRC=CONC(PORT_u8PIN_23_DEFAULT_DIR,PORT_u8PIN_22_DEFAULT_DIR,PORT_u8PIN_21_DEFAULT_DIR,PORT_u8PIN_20_DEFAULT_DIR,PORT_u8PIN_19_DEFAULT_DIR,PORT_u8PIN_18_DEFAULT_DIR,PORT_u8PIN_17_DEFAULT_DIR,PORT_u8PIN_16_DEFAULT_DIR);
    287c:	e4 e3       	ldi	r30, 0x34	; 52
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	8f e0       	ldi	r24, 0x0F	; 15
    2882:	80 83       	st	Z, r24
PORTC=CONC(PORT_u8PIN_23_DEFAULT_VALUE,PORT_u8PIN_22_DEFAULT_VALUE,PORT_u8PIN_21_DEFAULT_VALUE,PORT_u8PIN_20_DEFAULT_VALUE,PORT_u8PIN_19_DEFAULT_VALUE,PORT_u8PIN_18_DEFAULT_VALUE,PORT_u8PIN_17_DEFAULT_VALUE,PORT_u8PIN_16_DEFAULT_VALUE);
    2884:	e5 e3       	ldi	r30, 0x35	; 53
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 ef       	ldi	r24, 0xF0	; 240
    288a:	80 83       	st	Z, r24

DDRD=CONC(PORT_u8PIN_31_DEFAULT_DIR,PORT_u8PIN_30_DEFAULT_DIR,PORT_u8PIN_29_DEFAULT_DIR,PORT_u8PIN_28_DEFAULT_DIR,PORT_u8PIN_27_DEFAULT_DIR,PORT_u8PIN_26_DEFAULT_DIR,PORT_u8PIN_25_DEFAULT_DIR,PORT_u8PIN_24_DEFAULT_DIR);
    288c:	e1 e3       	ldi	r30, 0x31	; 49
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	8f ef       	ldi	r24, 0xFF	; 255
    2892:	80 83       	st	Z, r24
PORTD=CONC(PORT_u8PIN_31_DEFAULT_VALUE,PORT_u8PIN_30_DEFAULT_VALUE,PORT_u8PIN_29_DEFAULT_VALUE,PORT_u8PIN_28_DEFAULT_VALUE,PORT_u8PIN_27_DEFAULT_VALUE,PORT_u8PIN_26_DEFAULT_VALUE,PORT_u8PIN_25_DEFAULT_VALUE,PORT_u8PIN_24_DEFAULT_VALUE);
    2894:	e2 e3       	ldi	r30, 0x32	; 50
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	10 82       	st	Z, r1
}
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <Port_vidSetPinDir>:

void Port_vidSetPinDir(Port_tenuPinId Copy_enuPinId, Port_tenuPinDir Copy_enuPinDir){
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	00 d0       	rcall	.+0      	; 0x28a6 <Port_vidSetPinDir+0x6>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <Port_vidSetPinDir+0x8>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <Port_vidSetPinDir+0xa>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	8b 83       	std	Y+3, r24	; 0x03
    28b0:	6c 83       	std	Y+4, r22	; 0x04

	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_enuPinId /8;
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	86 95       	lsr	r24
    28b6:	86 95       	lsr	r24
    28b8:	86 95       	lsr	r24
    28ba:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_enuPinId %8;
    28bc:	8b 81       	ldd	r24, Y+3	; 0x03
    28be:	87 70       	andi	r24, 0x07	; 7
    28c0:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	3e 83       	std	Y+6, r19	; 0x06
    28ca:	2d 83       	std	Y+5, r18	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	81 30       	cpi	r24, 0x01	; 1
    28d2:	91 05       	cpc	r25, r1
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <Port_vidSetPinDir+0x38>
    28d6:	43 c0       	rjmp	.+134    	; 0x295e <Port_vidSetPinDir+0xbe>
    28d8:	2d 81       	ldd	r18, Y+5	; 0x05
    28da:	3e 81       	ldd	r19, Y+6	; 0x06
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	2c f4       	brge	.+10     	; 0x28ec <Port_vidSetPinDir+0x4c>
    28e2:	8d 81       	ldd	r24, Y+5	; 0x05
    28e4:	9e 81       	ldd	r25, Y+6	; 0x06
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	71 f0       	breq	.+28     	; 0x2906 <Port_vidSetPinDir+0x66>
    28ea:	bc c0       	rjmp	.+376    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
    28ec:	2d 81       	ldd	r18, Y+5	; 0x05
    28ee:	3e 81       	ldd	r19, Y+6	; 0x06
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <Port_vidSetPinDir+0x58>
    28f6:	5f c0       	rjmp	.+190    	; 0x29b6 <Port_vidSetPinDir+0x116>
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	83 30       	cpi	r24, 0x03	; 3
    28fe:	91 05       	cpc	r25, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <Port_vidSetPinDir+0x64>
    2902:	85 c0       	rjmp	.+266    	; 0x2a0e <Port_vidSetPinDir+0x16e>
    2904:	af c0       	rjmp	.+350    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
	case 0:	//PORTA
		if(Copy_enuPinDir==Port_enuOutput)
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	88 23       	and	r24, r24
    290a:	a1 f4       	brne	.+40     	; 0x2934 <Port_vidSetPinDir+0x94>
		{
			SET_BIT(DDRA,Loc_u8PinId);
    290c:	aa e3       	ldi	r26, 0x3A	; 58
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	ea e3       	ldi	r30, 0x3A	; 58
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	48 2f       	mov	r20, r24
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	28 2f       	mov	r18, r24
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	02 2e       	mov	r0, r18
    2924:	02 c0       	rjmp	.+4      	; 0x292a <Port_vidSetPinDir+0x8a>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <Port_vidSetPinDir+0x86>
    292e:	84 2b       	or	r24, r20
    2930:	8c 93       	st	X, r24
    2932:	98 c0       	rjmp	.+304    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRA,Loc_u8PinId);
    2934:	aa e3       	ldi	r26, 0x3A	; 58
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ea e3       	ldi	r30, 0x3A	; 58
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	48 2f       	mov	r20, r24
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	02 2e       	mov	r0, r18
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <Port_vidSetPinDir+0xb2>
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	0a 94       	dec	r0
    2954:	e2 f7       	brpl	.-8      	; 0x294e <Port_vidSetPinDir+0xae>
    2956:	80 95       	com	r24
    2958:	84 23       	and	r24, r20
    295a:	8c 93       	st	X, r24
    295c:	83 c0       	rjmp	.+262    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
	break;
	case 1:	//PORTB
		if(Copy_enuPinDir==Port_enuOutput)
    295e:	8c 81       	ldd	r24, Y+4	; 0x04
    2960:	88 23       	and	r24, r24
    2962:	a1 f4       	brne	.+40     	; 0x298c <Port_vidSetPinDir+0xec>
		{
			SET_BIT(DDRB,Loc_u8PinId);
    2964:	a7 e3       	ldi	r26, 0x37	; 55
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e7 e3       	ldi	r30, 0x37	; 55
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	48 2f       	mov	r20, r24
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	02 2e       	mov	r0, r18
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <Port_vidSetPinDir+0xe2>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	0a 94       	dec	r0
    2984:	e2 f7       	brpl	.-8      	; 0x297e <Port_vidSetPinDir+0xde>
    2986:	84 2b       	or	r24, r20
    2988:	8c 93       	st	X, r24
    298a:	6c c0       	rjmp	.+216    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRB,Loc_u8PinId);
    298c:	a7 e3       	ldi	r26, 0x37	; 55
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e7 e3       	ldi	r30, 0x37	; 55
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	48 2f       	mov	r20, r24
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	02 2e       	mov	r0, r18
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <Port_vidSetPinDir+0x10a>
    29a6:	88 0f       	add	r24, r24
    29a8:	99 1f       	adc	r25, r25
    29aa:	0a 94       	dec	r0
    29ac:	e2 f7       	brpl	.-8      	; 0x29a6 <Port_vidSetPinDir+0x106>
    29ae:	80 95       	com	r24
    29b0:	84 23       	and	r24, r20
    29b2:	8c 93       	st	X, r24
    29b4:	57 c0       	rjmp	.+174    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
	break;
	case 2:	// PORTC
		if(Copy_enuPinDir==Port_enuOutput)
    29b6:	8c 81       	ldd	r24, Y+4	; 0x04
    29b8:	88 23       	and	r24, r24
    29ba:	a1 f4       	brne	.+40     	; 0x29e4 <Port_vidSetPinDir+0x144>
		{
			SET_BIT(DDRC,Loc_u8PinId);
    29bc:	a4 e3       	ldi	r26, 0x34	; 52
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e4 e3       	ldi	r30, 0x34	; 52
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	48 2f       	mov	r20, r24
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	02 2e       	mov	r0, r18
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <Port_vidSetPinDir+0x13a>
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	0a 94       	dec	r0
    29dc:	e2 f7       	brpl	.-8      	; 0x29d6 <Port_vidSetPinDir+0x136>
    29de:	84 2b       	or	r24, r20
    29e0:	8c 93       	st	X, r24
    29e2:	40 c0       	rjmp	.+128    	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRC,Loc_u8PinId);
    29e4:	a4 e3       	ldi	r26, 0x34	; 52
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e4 e3       	ldi	r30, 0x34	; 52
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <Port_vidSetPinDir+0x162>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <Port_vidSetPinDir+0x15e>
    2a06:	80 95       	com	r24
    2a08:	84 23       	and	r24, r20
    2a0a:	8c 93       	st	X, r24
    2a0c:	2b c0       	rjmp	.+86     	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
	break;
	case 3:	// PORTD
		if(Copy_enuPinDir==Port_enuOutput)
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	88 23       	and	r24, r24
    2a12:	a1 f4       	brne	.+40     	; 0x2a3c <Port_vidSetPinDir+0x19c>
		{
			SET_BIT(DDRD,Loc_u8PinId);
    2a14:	a1 e3       	ldi	r26, 0x31	; 49
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e1 e3       	ldi	r30, 0x31	; 49
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <Port_vidSetPinDir+0x192>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <Port_vidSetPinDir+0x18e>
    2a36:	84 2b       	or	r24, r20
    2a38:	8c 93       	st	X, r24
    2a3a:	14 c0       	rjmp	.+40     	; 0x2a64 <Port_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRD,Loc_u8PinId);
    2a3c:	a1 e3       	ldi	r26, 0x31	; 49
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e1 e3       	ldi	r30, 0x31	; 49
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	48 2f       	mov	r20, r24
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 2e       	mov	r0, r18
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <Port_vidSetPinDir+0x1ba>
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	0a 94       	dec	r0
    2a5c:	e2 f7       	brpl	.-8      	; 0x2a56 <Port_vidSetPinDir+0x1b6>
    2a5e:	80 95       	com	r24
    2a60:	84 23       	and	r24, r20
    2a62:	8c 93       	st	X, r24
		}
	break;
	default:
	break;
	}
}
    2a64:	26 96       	adiw	r28, 0x06	; 6
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <Port_vidSetPinMode>:

void Port_vidSetPinMode(Port_tenuPinId Copy_enuPinId, Port_tenuPinMode Copy_enuPinMode){
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <Port_vidSetPinMode+0x6>
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <Port_vidSetPinMode+0x8>
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <Port_vidSetPinMode+0xa>
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
    2a84:	8b 83       	std	Y+3, r24	; 0x03
    2a86:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8PortId;
		u8 Loc_u8PinId;

		Loc_u8PortId = Copy_enuPinId /8;
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	86 95       	lsr	r24
    2a8c:	86 95       	lsr	r24
    2a8e:	86 95       	lsr	r24
    2a90:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8PinId  = Copy_enuPinId %8;
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	87 70       	andi	r24, 0x07	; 7
    2a96:	89 83       	std	Y+1, r24	; 0x01

		switch(Loc_u8PortId){
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	3e 83       	std	Y+6, r19	; 0x06
    2aa0:	2d 83       	std	Y+5, r18	; 0x05
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	81 30       	cpi	r24, 0x01	; 1
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	09 f4       	brne	.+2      	; 0x2aae <Port_vidSetPinMode+0x38>
    2aac:	bc c0       	rjmp	.+376    	; 0x2c26 <Port_vidSetPinMode+0x1b0>
    2aae:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab0:	3e 81       	ldd	r19, Y+6	; 0x06
    2ab2:	22 30       	cpi	r18, 0x02	; 2
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	2c f4       	brge	.+10     	; 0x2ac2 <Port_vidSetPinMode+0x4c>
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	9e 81       	ldd	r25, Y+6	; 0x06
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	71 f0       	breq	.+28     	; 0x2adc <Port_vidSetPinMode+0x66>
    2ac0:	a0 c2       	rjmp	.+1344   	; 0x3002 <Port_vidSetPinMode+0x58c>
    2ac2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ac4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ac6:	22 30       	cpi	r18, 0x02	; 2
    2ac8:	31 05       	cpc	r19, r1
    2aca:	09 f4       	brne	.+2      	; 0x2ace <Port_vidSetPinMode+0x58>
    2acc:	51 c1       	rjmp	.+674    	; 0x2d70 <Port_vidSetPinMode+0x2fa>
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	83 30       	cpi	r24, 0x03	; 3
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <Port_vidSetPinMode+0x64>
    2ad8:	f0 c1       	rjmp	.+992    	; 0x2eba <Port_vidSetPinMode+0x444>
    2ada:	93 c2       	rjmp	.+1318   	; 0x3002 <Port_vidSetPinMode+0x58c>
		case 0:	//PORTA
			if(Copy_enuPinMode==Port_enuOutputHigh)
    2adc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ade:	88 23       	and	r24, r24
    2ae0:	31 f5       	brne	.+76     	; 0x2b2e <Port_vidSetPinMode+0xb8>
			{
				SET_BIT(DDRA,Loc_u8PinId);	// output
    2ae2:	aa e3       	ldi	r26, 0x3A	; 58
    2ae4:	b0 e0       	ldi	r27, 0x00	; 0
    2ae6:	ea e3       	ldi	r30, 0x3A	; 58
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	80 81       	ld	r24, Z
    2aec:	48 2f       	mov	r20, r24
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	28 2f       	mov	r18, r24
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <Port_vidSetPinMode+0x88>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	2a 95       	dec	r18
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <Port_vidSetPinMode+0x84>
    2b02:	84 2b       	or	r24, r20
    2b04:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinId);	// high
    2b06:	ab e3       	ldi	r26, 0x3B	; 59
    2b08:	b0 e0       	ldi	r27, 0x00	; 0
    2b0a:	eb e3       	ldi	r30, 0x3B	; 59
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	80 81       	ld	r24, Z
    2b10:	48 2f       	mov	r20, r24
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	28 2f       	mov	r18, r24
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	02 2e       	mov	r0, r18
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <Port_vidSetPinMode+0xae>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	0a 94       	dec	r0
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <Port_vidSetPinMode+0xaa>
    2b28:	84 2b       	or	r24, r20
    2b2a:	8c 93       	st	X, r24
    2b2c:	6a c2       	rjmp	.+1236   	; 0x3002 <Port_vidSetPinMode+0x58c>
			}
			else if (Copy_enuPinMode==Port_enuInputHighImpedance)
    2b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b30:	82 30       	cpi	r24, 0x02	; 2
    2b32:	41 f5       	brne	.+80     	; 0x2b84 <Port_vidSetPinMode+0x10e>
			{
				CLR_BIT(DDRA,Loc_u8PinId); 	// input
    2b34:	aa e3       	ldi	r26, 0x3A	; 58
    2b36:	b0 e0       	ldi	r27, 0x00	; 0
    2b38:	ea e3       	ldi	r30, 0x3A	; 58
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	48 2f       	mov	r20, r24
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <Port_vidSetPinMode+0xda>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	2a 95       	dec	r18
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <Port_vidSetPinMode+0xd6>
    2b54:	80 95       	com	r24
    2b56:	84 23       	and	r24, r20
    2b58:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinId);	// low (high impedance)
    2b5a:	ab e3       	ldi	r26, 0x3B	; 59
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	eb e3       	ldi	r30, 0x3B	; 59
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <Port_vidSetPinMode+0x102>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <Port_vidSetPinMode+0xfe>
    2b7c:	80 95       	com	r24
    2b7e:	84 23       	and	r24, r20
    2b80:	8c 93       	st	X, r24
    2b82:	3f c2       	rjmp	.+1150   	; 0x3002 <Port_vidSetPinMode+0x58c>
			}
			else if (Copy_enuPinMode==Port_enuInputPullUp)
    2b84:	8c 81       	ldd	r24, Y+4	; 0x04
    2b86:	83 30       	cpi	r24, 0x03	; 3
    2b88:	39 f5       	brne	.+78     	; 0x2bd8 <Port_vidSetPinMode+0x162>
			{
				CLR_BIT(DDRA,Loc_u8PinId);	// input
    2b8a:	aa e3       	ldi	r26, 0x3A	; 58
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	ea e3       	ldi	r30, 0x3A	; 58
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	48 2f       	mov	r20, r24
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	02 c0       	rjmp	.+4      	; 0x2ba6 <Port_vidSetPinMode+0x130>
    2ba2:	88 0f       	add	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	2a 95       	dec	r18
    2ba8:	e2 f7       	brpl	.-8      	; 0x2ba2 <Port_vidSetPinMode+0x12c>
    2baa:	80 95       	com	r24
    2bac:	84 23       	and	r24, r20
    2bae:	8c 93       	st	X, r24
				SET_BIT(PORTA,Loc_u8PinId);	// high (PULL UP)
    2bb0:	ab e3       	ldi	r26, 0x3B	; 59
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	eb e3       	ldi	r30, 0x3B	; 59
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	48 2f       	mov	r20, r24
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	02 2e       	mov	r0, r18
    2bc8:	02 c0       	rjmp	.+4      	; 0x2bce <Port_vidSetPinMode+0x158>
    2bca:	88 0f       	add	r24, r24
    2bcc:	99 1f       	adc	r25, r25
    2bce:	0a 94       	dec	r0
    2bd0:	e2 f7       	brpl	.-8      	; 0x2bca <Port_vidSetPinMode+0x154>
    2bd2:	84 2b       	or	r24, r20
    2bd4:	8c 93       	st	X, r24
    2bd6:	15 c2       	rjmp	.+1066   	; 0x3002 <Port_vidSetPinMode+0x58c>
			}
			else{
				//it will be Port_enuOutputLOW
				SET_BIT(DDRA,Loc_u8PinId);	// output
    2bd8:	aa e3       	ldi	r26, 0x3A	; 58
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	ea e3       	ldi	r30, 0x3A	; 58
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	48 2f       	mov	r20, r24
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <Port_vidSetPinMode+0x17e>
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	2a 95       	dec	r18
    2bf6:	e2 f7       	brpl	.-8      	; 0x2bf0 <Port_vidSetPinMode+0x17a>
    2bf8:	84 2b       	or	r24, r20
    2bfa:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Loc_u8PinId);	// low
    2bfc:	ab e3       	ldi	r26, 0x3B	; 59
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	eb e3       	ldi	r30, 0x3B	; 59
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	48 2f       	mov	r20, r24
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	28 2f       	mov	r18, r24
    2c0c:	30 e0       	ldi	r19, 0x00	; 0
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	02 2e       	mov	r0, r18
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <Port_vidSetPinMode+0x1a4>
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	0a 94       	dec	r0
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <Port_vidSetPinMode+0x1a0>
    2c1e:	80 95       	com	r24
    2c20:	84 23       	and	r24, r20
    2c22:	8c 93       	st	X, r24
    2c24:	ee c1       	rjmp	.+988    	; 0x3002 <Port_vidSetPinMode+0x58c>
			}
			break;
		break;
		case 1:	//PORTB
			if(Copy_enuPinMode==Port_enuOutputHigh)
    2c26:	8c 81       	ldd	r24, Y+4	; 0x04
    2c28:	88 23       	and	r24, r24
    2c2a:	31 f5       	brne	.+76     	; 0x2c78 <Port_vidSetPinMode+0x202>
				{
					SET_BIT(DDRB,Loc_u8PinId);	// output
    2c2c:	a7 e3       	ldi	r26, 0x37	; 55
    2c2e:	b0 e0       	ldi	r27, 0x00	; 0
    2c30:	e7 e3       	ldi	r30, 0x37	; 55
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	80 81       	ld	r24, Z
    2c36:	48 2f       	mov	r20, r24
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <Port_vidSetPinMode+0x1d2>
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	2a 95       	dec	r18
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <Port_vidSetPinMode+0x1ce>
    2c4c:	84 2b       	or	r24, r20
    2c4e:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinId);	// high
    2c50:	a8 e3       	ldi	r26, 0x38	; 56
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e8 e3       	ldi	r30, 0x38	; 56
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <Port_vidSetPinMode+0x1f8>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <Port_vidSetPinMode+0x1f4>
    2c72:	84 2b       	or	r24, r20
    2c74:	8c 93       	st	X, r24
    2c76:	c5 c1       	rjmp	.+906    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputHighImpedance)
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	82 30       	cpi	r24, 0x02	; 2
    2c7c:	41 f5       	brne	.+80     	; 0x2cce <Port_vidSetPinMode+0x258>
				{
					CLR_BIT(DDRB,Loc_u8PinId); 	// input
    2c7e:	a7 e3       	ldi	r26, 0x37	; 55
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e7 e3       	ldi	r30, 0x37	; 55
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	48 2f       	mov	r20, r24
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	28 2f       	mov	r18, r24
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	02 c0       	rjmp	.+4      	; 0x2c9a <Port_vidSetPinMode+0x224>
    2c96:	88 0f       	add	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	2a 95       	dec	r18
    2c9c:	e2 f7       	brpl	.-8      	; 0x2c96 <Port_vidSetPinMode+0x220>
    2c9e:	80 95       	com	r24
    2ca0:	84 23       	and	r24, r20
    2ca2:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinId);	// low (high impedance)
    2ca4:	a8 e3       	ldi	r26, 0x38	; 56
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e8 e3       	ldi	r30, 0x38	; 56
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	48 2f       	mov	r20, r24
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	28 2f       	mov	r18, r24
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	02 2e       	mov	r0, r18
    2cbc:	02 c0       	rjmp	.+4      	; 0x2cc2 <Port_vidSetPinMode+0x24c>
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	0a 94       	dec	r0
    2cc4:	e2 f7       	brpl	.-8      	; 0x2cbe <Port_vidSetPinMode+0x248>
    2cc6:	80 95       	com	r24
    2cc8:	84 23       	and	r24, r20
    2cca:	8c 93       	st	X, r24
    2ccc:	9a c1       	rjmp	.+820    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputPullUp)
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	83 30       	cpi	r24, 0x03	; 3
    2cd2:	39 f5       	brne	.+78     	; 0x2d22 <Port_vidSetPinMode+0x2ac>
				{
					CLR_BIT(DDRB,Loc_u8PinId);	// input
    2cd4:	a7 e3       	ldi	r26, 0x37	; 55
    2cd6:	b0 e0       	ldi	r27, 0x00	; 0
    2cd8:	e7 e3       	ldi	r30, 0x37	; 55
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	80 81       	ld	r24, Z
    2cde:	48 2f       	mov	r20, r24
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	02 c0       	rjmp	.+4      	; 0x2cf0 <Port_vidSetPinMode+0x27a>
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	2a 95       	dec	r18
    2cf2:	e2 f7       	brpl	.-8      	; 0x2cec <Port_vidSetPinMode+0x276>
    2cf4:	80 95       	com	r24
    2cf6:	84 23       	and	r24, r20
    2cf8:	8c 93       	st	X, r24
					SET_BIT(PORTB,Loc_u8PinId);	// high (PULL UP)
    2cfa:	a8 e3       	ldi	r26, 0x38	; 56
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	e8 e3       	ldi	r30, 0x38	; 56
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <Port_vidSetPinMode+0x2a2>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <Port_vidSetPinMode+0x29e>
    2d1c:	84 2b       	or	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	70 c1       	rjmp	.+736    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else{
					//it will be Port_enuOutputLOW
					SET_BIT(DDRB,Loc_u8PinId);	// output
    2d22:	a7 e3       	ldi	r26, 0x37	; 55
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e7 e3       	ldi	r30, 0x37	; 55
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <Port_vidSetPinMode+0x2c8>
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	2a 95       	dec	r18
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <Port_vidSetPinMode+0x2c4>
    2d42:	84 2b       	or	r24, r20
    2d44:	8c 93       	st	X, r24
					CLR_BIT(PORTB,Loc_u8PinId);	// low
    2d46:	a8 e3       	ldi	r26, 0x38	; 56
    2d48:	b0 e0       	ldi	r27, 0x00	; 0
    2d4a:	e8 e3       	ldi	r30, 0x38	; 56
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	48 2f       	mov	r20, r24
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	28 2f       	mov	r18, r24
    2d56:	30 e0       	ldi	r19, 0x00	; 0
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	02 2e       	mov	r0, r18
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <Port_vidSetPinMode+0x2ee>
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	0a 94       	dec	r0
    2d66:	e2 f7       	brpl	.-8      	; 0x2d60 <Port_vidSetPinMode+0x2ea>
    2d68:	80 95       	com	r24
    2d6a:	84 23       	and	r24, r20
    2d6c:	8c 93       	st	X, r24
    2d6e:	49 c1       	rjmp	.+658    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
		break;
		case 2:	// PORTC
			if(Copy_enuPinMode==Port_enuOutputHigh)
    2d70:	8c 81       	ldd	r24, Y+4	; 0x04
    2d72:	88 23       	and	r24, r24
    2d74:	31 f5       	brne	.+76     	; 0x2dc2 <Port_vidSetPinMode+0x34c>
				{
					SET_BIT(DDRC,Loc_u8PinId);	// output
    2d76:	a4 e3       	ldi	r26, 0x34	; 52
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e4 e3       	ldi	r30, 0x34	; 52
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	48 2f       	mov	r20, r24
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <Port_vidSetPinMode+0x31c>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	2a 95       	dec	r18
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <Port_vidSetPinMode+0x318>
    2d96:	84 2b       	or	r24, r20
    2d98:	8c 93       	st	X, r24
					SET_BIT(PORTC,Loc_u8PinId);	// high
    2d9a:	a5 e3       	ldi	r26, 0x35	; 53
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e5 e3       	ldi	r30, 0x35	; 53
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	48 2f       	mov	r20, r24
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	02 2e       	mov	r0, r18
    2db2:	02 c0       	rjmp	.+4      	; 0x2db8 <Port_vidSetPinMode+0x342>
    2db4:	88 0f       	add	r24, r24
    2db6:	99 1f       	adc	r25, r25
    2db8:	0a 94       	dec	r0
    2dba:	e2 f7       	brpl	.-8      	; 0x2db4 <Port_vidSetPinMode+0x33e>
    2dbc:	84 2b       	or	r24, r20
    2dbe:	8c 93       	st	X, r24
    2dc0:	20 c1       	rjmp	.+576    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputHighImpedance)
    2dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc4:	82 30       	cpi	r24, 0x02	; 2
    2dc6:	41 f5       	brne	.+80     	; 0x2e18 <Port_vidSetPinMode+0x3a2>
				{
					CLR_BIT(DDRC,Loc_u8PinId); 	// input
    2dc8:	a4 e3       	ldi	r26, 0x34	; 52
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	e4 e3       	ldi	r30, 0x34	; 52
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	80 81       	ld	r24, Z
    2dd2:	48 2f       	mov	r20, r24
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	28 2f       	mov	r18, r24
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <Port_vidSetPinMode+0x36e>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	2a 95       	dec	r18
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <Port_vidSetPinMode+0x36a>
    2de8:	80 95       	com	r24
    2dea:	84 23       	and	r24, r20
    2dec:	8c 93       	st	X, r24
					CLR_BIT(PORTC,Loc_u8PinId);	// low (high impedance)
    2dee:	a5 e3       	ldi	r26, 0x35	; 53
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	e5 e3       	ldi	r30, 0x35	; 53
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	48 2f       	mov	r20, r24
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	02 2e       	mov	r0, r18
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <Port_vidSetPinMode+0x396>
    2e08:	88 0f       	add	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	0a 94       	dec	r0
    2e0e:	e2 f7       	brpl	.-8      	; 0x2e08 <Port_vidSetPinMode+0x392>
    2e10:	80 95       	com	r24
    2e12:	84 23       	and	r24, r20
    2e14:	8c 93       	st	X, r24
    2e16:	f5 c0       	rjmp	.+490    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputPullUp)
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	83 30       	cpi	r24, 0x03	; 3
    2e1c:	39 f5       	brne	.+78     	; 0x2e6c <Port_vidSetPinMode+0x3f6>
				{
					CLR_BIT(DDRC,Loc_u8PinId);	// input
    2e1e:	a4 e3       	ldi	r26, 0x34	; 52
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e4 e3       	ldi	r30, 0x34	; 52
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	48 2f       	mov	r20, r24
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <Port_vidSetPinMode+0x3c4>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	2a 95       	dec	r18
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <Port_vidSetPinMode+0x3c0>
    2e3e:	80 95       	com	r24
    2e40:	84 23       	and	r24, r20
    2e42:	8c 93       	st	X, r24
					SET_BIT(PORTC,Loc_u8PinId);	// high (PULL UP)
    2e44:	a5 e3       	ldi	r26, 0x35	; 53
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e5 e3       	ldi	r30, 0x35	; 53
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 2e       	mov	r0, r18
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <Port_vidSetPinMode+0x3ec>
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	0a 94       	dec	r0
    2e64:	e2 f7       	brpl	.-8      	; 0x2e5e <Port_vidSetPinMode+0x3e8>
    2e66:	84 2b       	or	r24, r20
    2e68:	8c 93       	st	X, r24
    2e6a:	cb c0       	rjmp	.+406    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else{
					//it will be Port_enuOutputLOW
					SET_BIT(DDRC,Loc_u8PinId);	// output
    2e6c:	a4 e3       	ldi	r26, 0x34	; 52
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	e4 e3       	ldi	r30, 0x34	; 52
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	48 2f       	mov	r20, r24
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	90 e0       	ldi	r25, 0x00	; 0
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <Port_vidSetPinMode+0x412>
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	2a 95       	dec	r18
    2e8a:	e2 f7       	brpl	.-8      	; 0x2e84 <Port_vidSetPinMode+0x40e>
    2e8c:	84 2b       	or	r24, r20
    2e8e:	8c 93       	st	X, r24
					CLR_BIT(PORTC,Loc_u8PinId);	// low
    2e90:	a5 e3       	ldi	r26, 0x35	; 53
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e5 e3       	ldi	r30, 0x35	; 53
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	48 2f       	mov	r20, r24
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 2e       	mov	r0, r18
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <Port_vidSetPinMode+0x438>
    2eaa:	88 0f       	add	r24, r24
    2eac:	99 1f       	adc	r25, r25
    2eae:	0a 94       	dec	r0
    2eb0:	e2 f7       	brpl	.-8      	; 0x2eaa <Port_vidSetPinMode+0x434>
    2eb2:	80 95       	com	r24
    2eb4:	84 23       	and	r24, r20
    2eb6:	8c 93       	st	X, r24
    2eb8:	a4 c0       	rjmp	.+328    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			break;
		case 3:	// PORTD
			if(Copy_enuPinMode==Port_enuOutputHigh)
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	88 23       	and	r24, r24
    2ebe:	31 f5       	brne	.+76     	; 0x2f0c <Port_vidSetPinMode+0x496>
				{
					SET_BIT(DDRD,Loc_u8PinId);	// output
    2ec0:	a1 e3       	ldi	r26, 0x31	; 49
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e1 e3       	ldi	r30, 0x31	; 49
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	48 2f       	mov	r20, r24
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <Port_vidSetPinMode+0x466>
    2ed8:	88 0f       	add	r24, r24
    2eda:	99 1f       	adc	r25, r25
    2edc:	2a 95       	dec	r18
    2ede:	e2 f7       	brpl	.-8      	; 0x2ed8 <Port_vidSetPinMode+0x462>
    2ee0:	84 2b       	or	r24, r20
    2ee2:	8c 93       	st	X, r24
					SET_BIT(PORTD,Loc_u8PinId);	// high
    2ee4:	a2 e3       	ldi	r26, 0x32	; 50
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	e2 e3       	ldi	r30, 0x32	; 50
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	80 81       	ld	r24, Z
    2eee:	48 2f       	mov	r20, r24
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	28 2f       	mov	r18, r24
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	02 2e       	mov	r0, r18
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <Port_vidSetPinMode+0x48c>
    2efe:	88 0f       	add	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	0a 94       	dec	r0
    2f04:	e2 f7       	brpl	.-8      	; 0x2efe <Port_vidSetPinMode+0x488>
    2f06:	84 2b       	or	r24, r20
    2f08:	8c 93       	st	X, r24
    2f0a:	7b c0       	rjmp	.+246    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputHighImpedance)
    2f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f0e:	82 30       	cpi	r24, 0x02	; 2
    2f10:	41 f5       	brne	.+80     	; 0x2f62 <Port_vidSetPinMode+0x4ec>
				{
					CLR_BIT(DDRD,Loc_u8PinId); 	// input
    2f12:	a1 e3       	ldi	r26, 0x31	; 49
    2f14:	b0 e0       	ldi	r27, 0x00	; 0
    2f16:	e1 e3       	ldi	r30, 0x31	; 49
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	80 81       	ld	r24, Z
    2f1c:	48 2f       	mov	r20, r24
    2f1e:	89 81       	ldd	r24, Y+1	; 0x01
    2f20:	28 2f       	mov	r18, r24
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <Port_vidSetPinMode+0x4b8>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	2a 95       	dec	r18
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <Port_vidSetPinMode+0x4b4>
    2f32:	80 95       	com	r24
    2f34:	84 23       	and	r24, r20
    2f36:	8c 93       	st	X, r24
					CLR_BIT(PORTD,Loc_u8PinId);	// low (high impedance)
    2f38:	a2 e3       	ldi	r26, 0x32	; 50
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e2 e3       	ldi	r30, 0x32	; 50
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	48 2f       	mov	r20, r24
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	02 2e       	mov	r0, r18
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <Port_vidSetPinMode+0x4e0>
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	0a 94       	dec	r0
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <Port_vidSetPinMode+0x4dc>
    2f5a:	80 95       	com	r24
    2f5c:	84 23       	and	r24, r20
    2f5e:	8c 93       	st	X, r24
    2f60:	50 c0       	rjmp	.+160    	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else if (Copy_enuPinMode==Port_enuInputPullUp)
    2f62:	8c 81       	ldd	r24, Y+4	; 0x04
    2f64:	83 30       	cpi	r24, 0x03	; 3
    2f66:	39 f5       	brne	.+78     	; 0x2fb6 <Port_vidSetPinMode+0x540>
				{
					CLR_BIT(DDRD,Loc_u8PinId);	// input
    2f68:	a1 e3       	ldi	r26, 0x31	; 49
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e1 e3       	ldi	r30, 0x31	; 49
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	48 2f       	mov	r20, r24
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <Port_vidSetPinMode+0x50e>
    2f80:	88 0f       	add	r24, r24
    2f82:	99 1f       	adc	r25, r25
    2f84:	2a 95       	dec	r18
    2f86:	e2 f7       	brpl	.-8      	; 0x2f80 <Port_vidSetPinMode+0x50a>
    2f88:	80 95       	com	r24
    2f8a:	84 23       	and	r24, r20
    2f8c:	8c 93       	st	X, r24
					SET_BIT(PORTD,Loc_u8PinId);	// high (PULL UP)
    2f8e:	a2 e3       	ldi	r26, 0x32	; 50
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e2 e3       	ldi	r30, 0x32	; 50
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	48 2f       	mov	r20, r24
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	02 2e       	mov	r0, r18
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <Port_vidSetPinMode+0x536>
    2fa8:	88 0f       	add	r24, r24
    2faa:	99 1f       	adc	r25, r25
    2fac:	0a 94       	dec	r0
    2fae:	e2 f7       	brpl	.-8      	; 0x2fa8 <Port_vidSetPinMode+0x532>
    2fb0:	84 2b       	or	r24, r20
    2fb2:	8c 93       	st	X, r24
    2fb4:	26 c0       	rjmp	.+76     	; 0x3002 <Port_vidSetPinMode+0x58c>
				}
			else{
					//it will be Port_enuOutputLOW
					SET_BIT(DDRD,Loc_u8PinId);	// output
    2fb6:	a1 e3       	ldi	r26, 0x31	; 49
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e1 e3       	ldi	r30, 0x31	; 49
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	48 2f       	mov	r20, r24
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
    2fc4:	28 2f       	mov	r18, r24
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <Port_vidSetPinMode+0x55c>
    2fce:	88 0f       	add	r24, r24
    2fd0:	99 1f       	adc	r25, r25
    2fd2:	2a 95       	dec	r18
    2fd4:	e2 f7       	brpl	.-8      	; 0x2fce <Port_vidSetPinMode+0x558>
    2fd6:	84 2b       	or	r24, r20
    2fd8:	8c 93       	st	X, r24
					CLR_BIT(PORTD,Loc_u8PinId);	// low
    2fda:	a2 e3       	ldi	r26, 0x32	; 50
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	e2 e3       	ldi	r30, 0x32	; 50
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 2e       	mov	r0, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <Port_vidSetPinMode+0x582>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	0a 94       	dec	r0
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <Port_vidSetPinMode+0x57e>
    2ffc:	80 95       	com	r24
    2ffe:	84 23       	and	r24, r20
    3000:	8c 93       	st	X, r24
			break;
		default:
		break;
		}

}
    3002:	26 96       	adiw	r28, 0x06	; 6
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	cf 91       	pop	r28
    3010:	df 91       	pop	r29
    3012:	08 95       	ret

00003014 <__prologue_saves__>:
    3014:	2f 92       	push	r2
    3016:	3f 92       	push	r3
    3018:	4f 92       	push	r4
    301a:	5f 92       	push	r5
    301c:	6f 92       	push	r6
    301e:	7f 92       	push	r7
    3020:	8f 92       	push	r8
    3022:	9f 92       	push	r9
    3024:	af 92       	push	r10
    3026:	bf 92       	push	r11
    3028:	cf 92       	push	r12
    302a:	df 92       	push	r13
    302c:	ef 92       	push	r14
    302e:	ff 92       	push	r15
    3030:	0f 93       	push	r16
    3032:	1f 93       	push	r17
    3034:	cf 93       	push	r28
    3036:	df 93       	push	r29
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	ca 1b       	sub	r28, r26
    303e:	db 0b       	sbc	r29, r27
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	09 94       	ijmp

0000304c <__epilogue_restores__>:
    304c:	2a 88       	ldd	r2, Y+18	; 0x12
    304e:	39 88       	ldd	r3, Y+17	; 0x11
    3050:	48 88       	ldd	r4, Y+16	; 0x10
    3052:	5f 84       	ldd	r5, Y+15	; 0x0f
    3054:	6e 84       	ldd	r6, Y+14	; 0x0e
    3056:	7d 84       	ldd	r7, Y+13	; 0x0d
    3058:	8c 84       	ldd	r8, Y+12	; 0x0c
    305a:	9b 84       	ldd	r9, Y+11	; 0x0b
    305c:	aa 84       	ldd	r10, Y+10	; 0x0a
    305e:	b9 84       	ldd	r11, Y+9	; 0x09
    3060:	c8 84       	ldd	r12, Y+8	; 0x08
    3062:	df 80       	ldd	r13, Y+7	; 0x07
    3064:	ee 80       	ldd	r14, Y+6	; 0x06
    3066:	fd 80       	ldd	r15, Y+5	; 0x05
    3068:	0c 81       	ldd	r16, Y+4	; 0x04
    306a:	1b 81       	ldd	r17, Y+3	; 0x03
    306c:	aa 81       	ldd	r26, Y+2	; 0x02
    306e:	b9 81       	ldd	r27, Y+1	; 0x01
    3070:	ce 0f       	add	r28, r30
    3072:	d1 1d       	adc	r29, r1
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	ed 01       	movw	r28, r26
    3080:	08 95       	ret

00003082 <_exit>:
    3082:	f8 94       	cli

00003084 <__stop_program>:
    3084:	ff cf       	rjmp	.-2      	; 0x3084 <__stop_program>

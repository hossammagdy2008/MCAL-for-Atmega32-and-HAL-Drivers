
DIO_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000568  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000008c4  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000ac0  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 02 	call	0x526	; 0x526 <main>
  64:	0c 94 b2 02 	jmp	0x564	; 0x564 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Dio_vidSetPinDir>:
#include <avr/io.h>
#define F_CPU 8000000
#include "Dio_int.h"


void Dio_vidSetPinDir(u8 Copy_u8SwPinId,u8 Copy_u8SwPinDir){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Dio_vidSetPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Dio_vidSetPinDir+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <Dio_vidSetPinDir+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	8b 83       	std	Y+3, r24	; 0x03
  7c:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
  7e:	8b 81       	ldd	r24, Y+3	; 0x03
  80:	86 95       	lsr	r24
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
  88:	8b 81       	ldd	r24, Y+3	; 0x03
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	3e 83       	std	Y+6, r19	; 0x06
  96:	2d 83       	std	Y+5, r18	; 0x05
  98:	8d 81       	ldd	r24, Y+5	; 0x05
  9a:	9e 81       	ldd	r25, Y+6	; 0x06
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	91 05       	cpc	r25, r1
  a0:	09 f4       	brne	.+2      	; 0xa4 <Dio_vidSetPinDir+0x38>
  a2:	43 c0       	rjmp	.+134    	; 0x12a <Dio_vidSetPinDir+0xbe>
  a4:	2d 81       	ldd	r18, Y+5	; 0x05
  a6:	3e 81       	ldd	r19, Y+6	; 0x06
  a8:	22 30       	cpi	r18, 0x02	; 2
  aa:	31 05       	cpc	r19, r1
  ac:	2c f4       	brge	.+10     	; 0xb8 <Dio_vidSetPinDir+0x4c>
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	00 97       	sbiw	r24, 0x00	; 0
  b4:	71 f0       	breq	.+28     	; 0xd2 <Dio_vidSetPinDir+0x66>
  b6:	bc c0       	rjmp	.+376    	; 0x230 <Dio_vidSetPinDir+0x1c4>
  b8:	2d 81       	ldd	r18, Y+5	; 0x05
  ba:	3e 81       	ldd	r19, Y+6	; 0x06
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	31 05       	cpc	r19, r1
  c0:	09 f4       	brne	.+2      	; 0xc4 <Dio_vidSetPinDir+0x58>
  c2:	5f c0       	rjmp	.+190    	; 0x182 <Dio_vidSetPinDir+0x116>
  c4:	8d 81       	ldd	r24, Y+5	; 0x05
  c6:	9e 81       	ldd	r25, Y+6	; 0x06
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	91 05       	cpc	r25, r1
  cc:	09 f4       	brne	.+2      	; 0xd0 <Dio_vidSetPinDir+0x64>
  ce:	85 c0       	rjmp	.+266    	; 0x1da <Dio_vidSetPinDir+0x16e>
  d0:	af c0       	rjmp	.+350    	; 0x230 <Dio_vidSetPinDir+0x1c4>
	case 0:	//PORTA
		if(Copy_u8SwPinDir==DIO_u8OUTPUT)
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	a1 f4       	brne	.+40     	; 0x100 <Dio_vidSetPinDir+0x94>
		{
			SET_BIT(DDRA,Loc_u8PinId);
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	28 2f       	mov	r18, r24
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 2e       	mov	r0, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <Dio_vidSetPinDir+0x8a>
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <Dio_vidSetPinDir+0x86>
  fa:	84 2b       	or	r24, r20
  fc:	8c 93       	st	X, r24
  fe:	98 c0       	rjmp	.+304    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRA,Loc_u8PinId);
 100:	aa e3       	ldi	r26, 0x3A	; 58
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ea e3       	ldi	r30, 0x3A	; 58
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	48 2f       	mov	r20, r24
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	28 2f       	mov	r18, r24
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dio_vidSetPinDir+0xb2>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dio_vidSetPinDir+0xae>
 122:	80 95       	com	r24
 124:	84 23       	and	r24, r20
 126:	8c 93       	st	X, r24
 128:	83 c0       	rjmp	.+262    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
	break;
	case 1:	//PORTB
		if(Copy_u8SwPinDir==DIO_u8OUTPUT)
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	a1 f4       	brne	.+40     	; 0x158 <Dio_vidSetPinDir+0xec>
		{
			SET_BIT(DDRB,Loc_u8PinId);
 130:	a7 e3       	ldi	r26, 0x37	; 55
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e7 e3       	ldi	r30, 0x37	; 55
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	48 2f       	mov	r20, r24
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 2e       	mov	r0, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <Dio_vidSetPinDir+0xe2>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <Dio_vidSetPinDir+0xde>
 152:	84 2b       	or	r24, r20
 154:	8c 93       	st	X, r24
 156:	6c c0       	rjmp	.+216    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRB,Loc_u8PinId);
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <Dio_vidSetPinDir+0x10a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <Dio_vidSetPinDir+0x106>
 17a:	80 95       	com	r24
 17c:	84 23       	and	r24, r20
 17e:	8c 93       	st	X, r24
 180:	57 c0       	rjmp	.+174    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
	break;
	case 2:	// PORTC
		if(Copy_u8SwPinDir==DIO_u8OUTPUT)
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	a1 f4       	brne	.+40     	; 0x1b0 <Dio_vidSetPinDir+0x144>
		{
			SET_BIT(DDRC,Loc_u8PinId);
 188:	a4 e3       	ldi	r26, 0x34	; 52
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e4 e3       	ldi	r30, 0x34	; 52
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <Dio_vidSetPinDir+0x13a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <Dio_vidSetPinDir+0x136>
 1aa:	84 2b       	or	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	40 c0       	rjmp	.+128    	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRC,Loc_u8PinId);
 1b0:	a4 e3       	ldi	r26, 0x34	; 52
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e4 e3       	ldi	r30, 0x34	; 52
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	48 2f       	mov	r20, r24
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	28 2f       	mov	r18, r24
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 2e       	mov	r0, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <Dio_vidSetPinDir+0x162>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <Dio_vidSetPinDir+0x15e>
 1d2:	80 95       	com	r24
 1d4:	84 23       	and	r24, r20
 1d6:	8c 93       	st	X, r24
 1d8:	2b c0       	rjmp	.+86     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
	break;
	case 3:	// PORTD
		if(Copy_u8SwPinDir==DIO_u8OUTPUT)
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	a1 f4       	brne	.+40     	; 0x208 <Dio_vidSetPinDir+0x19c>
		{
			SET_BIT(DDRD,Loc_u8PinId);
 1e0:	a1 e3       	ldi	r26, 0x31	; 49
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e1 e3       	ldi	r30, 0x31	; 49
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	48 2f       	mov	r20, r24
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	28 2f       	mov	r18, r24
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 2e       	mov	r0, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <Dio_vidSetPinDir+0x192>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <Dio_vidSetPinDir+0x18e>
 202:	84 2b       	or	r24, r20
 204:	8c 93       	st	X, r24
 206:	14 c0       	rjmp	.+40     	; 0x230 <Dio_vidSetPinDir+0x1c4>
		}
		else
		{
			CLR_BIT(DDRD,Loc_u8PinId);
 208:	a1 e3       	ldi	r26, 0x31	; 49
 20a:	b0 e0       	ldi	r27, 0x00	; 0
 20c:	e1 e3       	ldi	r30, 0x31	; 49
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	48 2f       	mov	r20, r24
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	28 2f       	mov	r18, r24
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 2e       	mov	r0, r18
 220:	02 c0       	rjmp	.+4      	; 0x226 <Dio_vidSetPinDir+0x1ba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	0a 94       	dec	r0
 228:	e2 f7       	brpl	.-8      	; 0x222 <Dio_vidSetPinDir+0x1b6>
 22a:	80 95       	com	r24
 22c:	84 23       	and	r24, r20
 22e:	8c 93       	st	X, r24
	break;
	default:
	break;
	}

}
 230:	26 96       	adiw	r28, 0x06	; 6
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <Dio_vidSetPinVal>:


void Dio_vidSetPinVal(u8 Copy_u8SwPinId,u8 Copy_u8SwPinVal){
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <Dio_vidSetPinVal+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <Dio_vidSetPinVal+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <Dio_vidSetPinVal+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	8b 83       	std	Y+3, r24	; 0x03
 252:	6c 83       	std	Y+4, r22	; 0x04
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	86 95       	lsr	r24
 258:	86 95       	lsr	r24
 25a:	86 95       	lsr	r24
 25c:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	87 70       	andi	r24, 0x07	; 7
 262:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	3e 83       	std	Y+6, r19	; 0x06
 26c:	2d 83       	std	Y+5, r18	; 0x05
 26e:	8d 81       	ldd	r24, Y+5	; 0x05
 270:	9e 81       	ldd	r25, Y+6	; 0x06
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	91 05       	cpc	r25, r1
 276:	09 f4       	brne	.+2      	; 0x27a <Dio_vidSetPinVal+0x38>
 278:	43 c0       	rjmp	.+134    	; 0x300 <Dio_vidSetPinVal+0xbe>
 27a:	2d 81       	ldd	r18, Y+5	; 0x05
 27c:	3e 81       	ldd	r19, Y+6	; 0x06
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	2c f4       	brge	.+10     	; 0x28e <Dio_vidSetPinVal+0x4c>
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	71 f0       	breq	.+28     	; 0x2a8 <Dio_vidSetPinVal+0x66>
 28c:	bc c0       	rjmp	.+376    	; 0x406 <Dio_vidSetPinVal+0x1c4>
 28e:	2d 81       	ldd	r18, Y+5	; 0x05
 290:	3e 81       	ldd	r19, Y+6	; 0x06
 292:	22 30       	cpi	r18, 0x02	; 2
 294:	31 05       	cpc	r19, r1
 296:	09 f4       	brne	.+2      	; 0x29a <Dio_vidSetPinVal+0x58>
 298:	5f c0       	rjmp	.+190    	; 0x358 <Dio_vidSetPinVal+0x116>
 29a:	8d 81       	ldd	r24, Y+5	; 0x05
 29c:	9e 81       	ldd	r25, Y+6	; 0x06
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	91 05       	cpc	r25, r1
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <Dio_vidSetPinVal+0x64>
 2a4:	85 c0       	rjmp	.+266    	; 0x3b0 <Dio_vidSetPinVal+0x16e>
 2a6:	af c0       	rjmp	.+350    	; 0x406 <Dio_vidSetPinVal+0x1c4>
	case 0:	//PORTA
		if(Copy_u8SwPinVal==DIO_u8HIGH)
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <Dio_vidSetPinVal+0x94>
		{
			SET_BIT(PORTA,Loc_u8PinId);
 2ae:	ab e3       	ldi	r26, 0x3B	; 59
 2b0:	b0 e0       	ldi	r27, 0x00	; 0
 2b2:	eb e3       	ldi	r30, 0x3B	; 59
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	48 2f       	mov	r20, r24
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 2e       	mov	r0, r18
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <Dio_vidSetPinVal+0x8a>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <Dio_vidSetPinVal+0x86>
 2d0:	84 2b       	or	r24, r20
 2d2:	8c 93       	st	X, r24
 2d4:	98 c0       	rjmp	.+304    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTA,Loc_u8PinId);
 2d6:	ab e3       	ldi	r26, 0x3B	; 59
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <Dio_vidSetPinVal+0xb2>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <Dio_vidSetPinVal+0xae>
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8c 93       	st	X, r24
 2fe:	83 c0       	rjmp	.+262    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 1:	//PORTB
		if(Copy_u8SwPinVal==DIO_u8HIGH)
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	a1 f4       	brne	.+40     	; 0x32e <Dio_vidSetPinVal+0xec>
		{
			SET_BIT(PORTB,Loc_u8PinId);
 306:	a8 e3       	ldi	r26, 0x38	; 56
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e8 e3       	ldi	r30, 0x38	; 56
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 2e       	mov	r0, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <Dio_vidSetPinVal+0xe2>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	0a 94       	dec	r0
 326:	e2 f7       	brpl	.-8      	; 0x320 <Dio_vidSetPinVal+0xde>
 328:	84 2b       	or	r24, r20
 32a:	8c 93       	st	X, r24
 32c:	6c c0       	rjmp	.+216    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTB,Loc_u8PinId);
 32e:	a8 e3       	ldi	r26, 0x38	; 56
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e8 e3       	ldi	r30, 0x38	; 56
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	89 81       	ldd	r24, Y+1	; 0x01
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <Dio_vidSetPinVal+0x10a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <Dio_vidSetPinVal+0x106>
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	8c 93       	st	X, r24
 356:	57 c0       	rjmp	.+174    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 2:	// PORTC
		if(Copy_u8SwPinVal==DIO_u8HIGH)
 358:	8c 81       	ldd	r24, Y+4	; 0x04
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	a1 f4       	brne	.+40     	; 0x386 <Dio_vidSetPinVal+0x144>
		{
			SET_BIT(PORTC,Loc_u8PinId);
 35e:	a5 e3       	ldi	r26, 0x35	; 53
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	e5 e3       	ldi	r30, 0x35	; 53
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	48 2f       	mov	r20, r24
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	28 2f       	mov	r18, r24
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	02 c0       	rjmp	.+4      	; 0x37c <Dio_vidSetPinVal+0x13a>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <Dio_vidSetPinVal+0x136>
 380:	84 2b       	or	r24, r20
 382:	8c 93       	st	X, r24
 384:	40 c0       	rjmp	.+128    	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTC,Loc_u8PinId);
 386:	a5 e3       	ldi	r26, 0x35	; 53
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	e5 e3       	ldi	r30, 0x35	; 53
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	89 81       	ldd	r24, Y+1	; 0x01
 394:	28 2f       	mov	r18, r24
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 2e       	mov	r0, r18
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <Dio_vidSetPinVal+0x162>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <Dio_vidSetPinVal+0x15e>
 3a8:	80 95       	com	r24
 3aa:	84 23       	and	r24, r20
 3ac:	8c 93       	st	X, r24
 3ae:	2b c0       	rjmp	.+86     	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
	break;
	case 3:	// PORTD
		if(Copy_u8SwPinVal==DIO_u8HIGH)
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	a1 f4       	brne	.+40     	; 0x3de <Dio_vidSetPinVal+0x19c>
		{
			SET_BIT(PORTD,Loc_u8PinId);
 3b6:	a2 e3       	ldi	r26, 0x32	; 50
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	e2 e3       	ldi	r30, 0x32	; 50
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Dio_vidSetPinVal+0x192>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Dio_vidSetPinVal+0x18e>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	14 c0       	rjmp	.+40     	; 0x406 <Dio_vidSetPinVal+0x1c4>
		}
		else
		{
			CLR_BIT(PORTD,Loc_u8PinId);
 3de:	a2 e3       	ldi	r26, 0x32	; 50
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e2 e3       	ldi	r30, 0x32	; 50
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	48 2f       	mov	r20, r24
 3ea:	89 81       	ldd	r24, Y+1	; 0x01
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 2e       	mov	r0, r18
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <Dio_vidSetPinVal+0x1ba>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	0a 94       	dec	r0
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <Dio_vidSetPinVal+0x1b6>
 400:	80 95       	com	r24
 402:	84 23       	and	r24, r20
 404:	8c 93       	st	X, r24
	break;
	default:
	break;
	}

}
 406:	26 96       	adiw	r28, 0x06	; 6
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	cf 91       	pop	r28
 414:	df 91       	pop	r29
 416:	08 95       	ret

00000418 <Dio_u8GetPinVal>:


u8 Dio_u8GetPinVal(u8 Copy_u8SwPinId){
 418:	df 93       	push	r29
 41a:	cf 93       	push	r28
 41c:	00 d0       	rcall	.+0      	; 0x41e <Dio_u8GetPinVal+0x6>
 41e:	00 d0       	rcall	.+0      	; 0x420 <Dio_u8GetPinVal+0x8>
 420:	00 d0       	rcall	.+0      	; 0x422 <Dio_u8GetPinVal+0xa>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	8b 83       	std	Y+3, r24	; 0x03
	u8 Loc_u8PortId;
	u8 Loc_u8PinId;

	Loc_u8PortId = Copy_u8SwPinId /8;
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	86 95       	lsr	r24
 42c:	86 95       	lsr	r24
 42e:	86 95       	lsr	r24
 430:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8PinId  = Copy_u8SwPinId %8;
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	87 70       	andi	r24, 0x07	; 7
 436:	89 83       	std	Y+1, r24	; 0x01

	switch(Loc_u8PortId){
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	3e 83       	std	Y+6, r19	; 0x06
 440:	2d 83       	std	Y+5, r18	; 0x05
 442:	4d 81       	ldd	r20, Y+5	; 0x05
 444:	5e 81       	ldd	r21, Y+6	; 0x06
 446:	41 30       	cpi	r20, 0x01	; 1
 448:	51 05       	cpc	r21, r1
 44a:	49 f1       	breq	.+82     	; 0x49e <Dio_u8GetPinVal+0x86>
 44c:	8d 81       	ldd	r24, Y+5	; 0x05
 44e:	9e 81       	ldd	r25, Y+6	; 0x06
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	91 05       	cpc	r25, r1
 454:	34 f4       	brge	.+12     	; 0x462 <Dio_u8GetPinVal+0x4a>
 456:	2d 81       	ldd	r18, Y+5	; 0x05
 458:	3e 81       	ldd	r19, Y+6	; 0x06
 45a:	21 15       	cp	r18, r1
 45c:	31 05       	cpc	r19, r1
 45e:	61 f0       	breq	.+24     	; 0x478 <Dio_u8GetPinVal+0x60>
 460:	57 c0       	rjmp	.+174    	; 0x510 <Dio_u8GetPinVal+0xf8>
 462:	4d 81       	ldd	r20, Y+5	; 0x05
 464:	5e 81       	ldd	r21, Y+6	; 0x06
 466:	42 30       	cpi	r20, 0x02	; 2
 468:	51 05       	cpc	r21, r1
 46a:	61 f1       	breq	.+88     	; 0x4c4 <Dio_u8GetPinVal+0xac>
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
 46e:	9e 81       	ldd	r25, Y+6	; 0x06
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	91 05       	cpc	r25, r1
 474:	d1 f1       	breq	.+116    	; 0x4ea <Dio_u8GetPinVal+0xd2>
 476:	4c c0       	rjmp	.+152    	; 0x510 <Dio_u8GetPinVal+0xf8>
	case 0:	//PORTA
		return GET_BIT(PINA,Loc_u8PinId);
 478:	e9 e3       	ldi	r30, 0x39	; 57
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	88 2f       	mov	r24, r24
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	a9 01       	movw	r20, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <Dio_u8GetPinVal+0x78>
 48c:	55 95       	asr	r21
 48e:	47 95       	ror	r20
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <Dio_u8GetPinVal+0x74>
 494:	ca 01       	movw	r24, r20
 496:	58 2f       	mov	r21, r24
 498:	51 70       	andi	r21, 0x01	; 1
 49a:	5c 83       	std	Y+4, r21	; 0x04
 49c:	3a c0       	rjmp	.+116    	; 0x512 <Dio_u8GetPinVal+0xfa>
	break;
	case 1:	//PORTB
		return GET_BIT(PINB,Loc_u8PinId);
 49e:	e6 e3       	ldi	r30, 0x36	; 54
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	28 2f       	mov	r18, r24
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	a9 01       	movw	r20, r18
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <Dio_u8GetPinVal+0x9e>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	8a 95       	dec	r24
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <Dio_u8GetPinVal+0x9a>
 4ba:	ca 01       	movw	r24, r20
 4bc:	58 2f       	mov	r21, r24
 4be:	51 70       	andi	r21, 0x01	; 1
 4c0:	5c 83       	std	Y+4, r21	; 0x04
 4c2:	27 c0       	rjmp	.+78     	; 0x512 <Dio_u8GetPinVal+0xfa>
	break;
	case 2:	//PORTC
		return GET_BIT(PINC,Loc_u8PinId);
 4c4:	e3 e3       	ldi	r30, 0x33	; 51
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	a9 01       	movw	r20, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <Dio_u8GetPinVal+0xc4>
 4d8:	55 95       	asr	r21
 4da:	47 95       	ror	r20
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <Dio_u8GetPinVal+0xc0>
 4e0:	ca 01       	movw	r24, r20
 4e2:	58 2f       	mov	r21, r24
 4e4:	51 70       	andi	r21, 0x01	; 1
 4e6:	5c 83       	std	Y+4, r21	; 0x04
 4e8:	14 c0       	rjmp	.+40     	; 0x512 <Dio_u8GetPinVal+0xfa>
	break;
	case 3:	//PORTD
		return GET_BIT(PIND,Loc_u8PinId);
 4ea:	e0 e3       	ldi	r30, 0x30	; 48
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	88 2f       	mov	r24, r24
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	a9 01       	movw	r20, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <Dio_u8GetPinVal+0xea>
 4fe:	55 95       	asr	r21
 500:	47 95       	ror	r20
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <Dio_u8GetPinVal+0xe6>
 506:	ca 01       	movw	r24, r20
 508:	58 2f       	mov	r21, r24
 50a:	51 70       	andi	r21, 0x01	; 1
 50c:	5c 83       	std	Y+4, r21	; 0x04
 50e:	01 c0       	rjmp	.+2      	; 0x512 <Dio_u8GetPinVal+0xfa>
	break;
	default:
		return 0;
 510:	1c 82       	std	Y+4, r1	; 0x04
 512:	8c 81       	ldd	r24, Y+4	; 0x04
	break;
	}
}
 514:	26 96       	adiw	r28, 0x06	; 6
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	f8 94       	cli
 51a:	de bf       	out	0x3e, r29	; 62
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	cd bf       	out	0x3d, r28	; 61
 520:	cf 91       	pop	r28
 522:	df 91       	pop	r29
 524:	08 95       	ret

00000526 <main>:
#include "../Lib/Std_Types.h"
#include "../Lib/Bit_Math.h"
#include <avr/io.h>
#include "Dio_int.h"

int main (void){
 526:	df 93       	push	r29
 528:	cf 93       	push	r28
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	Dio_vidSetPinDir(DIO_u8PIN_16,DIO_u8INPUT);	// PC0 = input
 52e:	80 e1       	ldi	r24, 0x10	; 16
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
	Dio_vidSetPinVal(DIO_u8PIN_16,DIO_u8HIGH);	// PC0 = pull up res
 536:	80 e1       	ldi	r24, 0x10	; 16
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
	Dio_vidSetPinDir(DIO_u8PIN_23,DIO_u8OUTPUT);// PC7 = output
 53e:	87 e1       	ldi	r24, 0x17	; 23
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	0e 94 36 00 	call	0x6c	; 0x6c <Dio_vidSetPinDir>
	while(1){
		if(!Dio_u8GetPinVal(DIO_u8PIN_16)){
 546:	80 e1       	ldi	r24, 0x10	; 16
 548:	0e 94 0c 02 	call	0x418	; 0x418 <Dio_u8GetPinVal>
 54c:	88 23       	and	r24, r24
 54e:	29 f4       	brne	.+10     	; 0x55a <main+0x34>
			Dio_vidSetPinVal(DIO_u8PIN_23,DIO_u8HIGH);
 550:	87 e1       	ldi	r24, 0x17	; 23
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 558:	f6 cf       	rjmp	.-20     	; 0x546 <main+0x20>
		}
		else{
			Dio_vidSetPinVal(DIO_u8PIN_23,DIO_u8LOW);
 55a:	87 e1       	ldi	r24, 0x17	; 23
 55c:	60 e0       	ldi	r22, 0x00	; 0
 55e:	0e 94 21 01 	call	0x242	; 0x242 <Dio_vidSetPinVal>
 562:	f1 cf       	rjmp	.-30     	; 0x546 <main+0x20>

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
